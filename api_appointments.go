/*
eHelply SDK - 1.1.110

eHelply SDK for SuperStack Services

API version: 1.1.110
Contact: support@ehelply.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ehelply

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// AppointmentsApiService AppointmentsApi service
type AppointmentsApiService service

type ApiAddEntityToAppointmentRequest struct {
	ctx context.Context
	ApiService *AppointmentsApiService
	appointmentUuid string
	entityUuid string
	xAccessToken *string
	xSecretToken *string
	authorization *string
	ehelplyActiveParticipant *string
	ehelplyProject *string
	ehelplyData *string
}

func (r ApiAddEntityToAppointmentRequest) XAccessToken(xAccessToken string) ApiAddEntityToAppointmentRequest {
	r.xAccessToken = &xAccessToken
	return r
}

func (r ApiAddEntityToAppointmentRequest) XSecretToken(xSecretToken string) ApiAddEntityToAppointmentRequest {
	r.xSecretToken = &xSecretToken
	return r
}

func (r ApiAddEntityToAppointmentRequest) Authorization(authorization string) ApiAddEntityToAppointmentRequest {
	r.authorization = &authorization
	return r
}

func (r ApiAddEntityToAppointmentRequest) EhelplyActiveParticipant(ehelplyActiveParticipant string) ApiAddEntityToAppointmentRequest {
	r.ehelplyActiveParticipant = &ehelplyActiveParticipant
	return r
}

func (r ApiAddEntityToAppointmentRequest) EhelplyProject(ehelplyProject string) ApiAddEntityToAppointmentRequest {
	r.ehelplyProject = &ehelplyProject
	return r
}

func (r ApiAddEntityToAppointmentRequest) EhelplyData(ehelplyData string) ApiAddEntityToAppointmentRequest {
	r.ehelplyData = &ehelplyData
	return r
}

func (r ApiAddEntityToAppointmentRequest) Execute() (bool, *http.Response, error) {
	return r.ApiService.AddEntityToAppointmentExecute(r)
}

/*
AddEntityToAppointment Addentitytoappointment

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param appointmentUuid
 @param entityUuid
 @return ApiAddEntityToAppointmentRequest
*/
func (a *AppointmentsApiService) AddEntityToAppointment(ctx context.Context, appointmentUuid string, entityUuid string) ApiAddEntityToAppointmentRequest {
	return ApiAddEntityToAppointmentRequest{
		ApiService: a,
		ctx: ctx,
		appointmentUuid: appointmentUuid,
		entityUuid: entityUuid,
	}
}

// Execute executes the request
//  @return bool
func (a *AppointmentsApiService) AddEntityToAppointmentExecute(r ApiAddEntityToAppointmentRequest) (bool, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  bool
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppointmentsApiService.AddEntityToAppointment")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/appointments/appointments/{appointment_uuid}/entities/{entity_uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"appointment_uuid"+"}", url.PathEscape(parameterToString(r.appointmentUuid, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"entity_uuid"+"}", url.PathEscape(parameterToString(r.entityUuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xAccessToken != nil {
		localVarHeaderParams["x-access-token"] = parameterToString(*r.xAccessToken, "")
	}
	if r.xSecretToken != nil {
		localVarHeaderParams["x-secret-token"] = parameterToString(*r.xSecretToken, "")
	}
	if r.authorization != nil {
		localVarHeaderParams["authorization"] = parameterToString(*r.authorization, "")
	}
	if r.ehelplyActiveParticipant != nil {
		localVarHeaderParams["ehelply-active-participant"] = parameterToString(*r.ehelplyActiveParticipant, "")
	}
	if r.ehelplyProject != nil {
		localVarHeaderParams["ehelply-project"] = parameterToString(*r.ehelplyProject, "")
	}
	if r.ehelplyData != nil {
		localVarHeaderParams["ehelply-data"] = parameterToString(*r.ehelplyData, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateAppointmentRequest struct {
	ctx context.Context
	ApiService *AppointmentsApiService
	appointmentBase *AppointmentBase
	xAccessToken *string
	xSecretToken *string
	authorization *string
	ehelplyActiveParticipant *string
	ehelplyProject *string
	ehelplyData *string
}

func (r ApiCreateAppointmentRequest) AppointmentBase(appointmentBase AppointmentBase) ApiCreateAppointmentRequest {
	r.appointmentBase = &appointmentBase
	return r
}

func (r ApiCreateAppointmentRequest) XAccessToken(xAccessToken string) ApiCreateAppointmentRequest {
	r.xAccessToken = &xAccessToken
	return r
}

func (r ApiCreateAppointmentRequest) XSecretToken(xSecretToken string) ApiCreateAppointmentRequest {
	r.xSecretToken = &xSecretToken
	return r
}

func (r ApiCreateAppointmentRequest) Authorization(authorization string) ApiCreateAppointmentRequest {
	r.authorization = &authorization
	return r
}

func (r ApiCreateAppointmentRequest) EhelplyActiveParticipant(ehelplyActiveParticipant string) ApiCreateAppointmentRequest {
	r.ehelplyActiveParticipant = &ehelplyActiveParticipant
	return r
}

func (r ApiCreateAppointmentRequest) EhelplyProject(ehelplyProject string) ApiCreateAppointmentRequest {
	r.ehelplyProject = &ehelplyProject
	return r
}

func (r ApiCreateAppointmentRequest) EhelplyData(ehelplyData string) ApiCreateAppointmentRequest {
	r.ehelplyData = &ehelplyData
	return r
}

func (r ApiCreateAppointmentRequest) Execute() (*AppointmentResponse, *http.Response, error) {
	return r.ApiService.CreateAppointmentExecute(r)
}

/*
CreateAppointment Createappointment

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateAppointmentRequest
*/
func (a *AppointmentsApiService) CreateAppointment(ctx context.Context) ApiCreateAppointmentRequest {
	return ApiCreateAppointmentRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AppointmentResponse
func (a *AppointmentsApiService) CreateAppointmentExecute(r ApiCreateAppointmentRequest) (*AppointmentResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppointmentResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppointmentsApiService.CreateAppointment")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/appointments/appointments"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.appointmentBase == nil {
		return localVarReturnValue, nil, reportError("appointmentBase is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xAccessToken != nil {
		localVarHeaderParams["x-access-token"] = parameterToString(*r.xAccessToken, "")
	}
	if r.xSecretToken != nil {
		localVarHeaderParams["x-secret-token"] = parameterToString(*r.xSecretToken, "")
	}
	if r.authorization != nil {
		localVarHeaderParams["authorization"] = parameterToString(*r.authorization, "")
	}
	if r.ehelplyActiveParticipant != nil {
		localVarHeaderParams["ehelply-active-participant"] = parameterToString(*r.ehelplyActiveParticipant, "")
	}
	if r.ehelplyProject != nil {
		localVarHeaderParams["ehelply-project"] = parameterToString(*r.ehelplyProject, "")
	}
	if r.ehelplyData != nil {
		localVarHeaderParams["ehelply-data"] = parameterToString(*r.ehelplyData, "")
	}
	// body params
	localVarPostBody = r.appointmentBase
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteAppointmentRequest struct {
	ctx context.Context
	ApiService *AppointmentsApiService
	appointmentUuid string
	xAccessToken *string
	xSecretToken *string
	authorization *string
	ehelplyActiveParticipant *string
	ehelplyProject *string
	ehelplyData *string
}

func (r ApiDeleteAppointmentRequest) XAccessToken(xAccessToken string) ApiDeleteAppointmentRequest {
	r.xAccessToken = &xAccessToken
	return r
}

func (r ApiDeleteAppointmentRequest) XSecretToken(xSecretToken string) ApiDeleteAppointmentRequest {
	r.xSecretToken = &xSecretToken
	return r
}

func (r ApiDeleteAppointmentRequest) Authorization(authorization string) ApiDeleteAppointmentRequest {
	r.authorization = &authorization
	return r
}

func (r ApiDeleteAppointmentRequest) EhelplyActiveParticipant(ehelplyActiveParticipant string) ApiDeleteAppointmentRequest {
	r.ehelplyActiveParticipant = &ehelplyActiveParticipant
	return r
}

func (r ApiDeleteAppointmentRequest) EhelplyProject(ehelplyProject string) ApiDeleteAppointmentRequest {
	r.ehelplyProject = &ehelplyProject
	return r
}

func (r ApiDeleteAppointmentRequest) EhelplyData(ehelplyData string) ApiDeleteAppointmentRequest {
	r.ehelplyData = &ehelplyData
	return r
}

func (r ApiDeleteAppointmentRequest) Execute() (bool, *http.Response, error) {
	return r.ApiService.DeleteAppointmentExecute(r)
}

/*
DeleteAppointment Deleteappointment

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param appointmentUuid
 @return ApiDeleteAppointmentRequest
*/
func (a *AppointmentsApiService) DeleteAppointment(ctx context.Context, appointmentUuid string) ApiDeleteAppointmentRequest {
	return ApiDeleteAppointmentRequest{
		ApiService: a,
		ctx: ctx,
		appointmentUuid: appointmentUuid,
	}
}

// Execute executes the request
//  @return bool
func (a *AppointmentsApiService) DeleteAppointmentExecute(r ApiDeleteAppointmentRequest) (bool, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  bool
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppointmentsApiService.DeleteAppointment")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/appointments/appointments/{appointment_uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"appointment_uuid"+"}", url.PathEscape(parameterToString(r.appointmentUuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xAccessToken != nil {
		localVarHeaderParams["x-access-token"] = parameterToString(*r.xAccessToken, "")
	}
	if r.xSecretToken != nil {
		localVarHeaderParams["x-secret-token"] = parameterToString(*r.xSecretToken, "")
	}
	if r.authorization != nil {
		localVarHeaderParams["authorization"] = parameterToString(*r.authorization, "")
	}
	if r.ehelplyActiveParticipant != nil {
		localVarHeaderParams["ehelply-active-participant"] = parameterToString(*r.ehelplyActiveParticipant, "")
	}
	if r.ehelplyProject != nil {
		localVarHeaderParams["ehelply-project"] = parameterToString(*r.ehelplyProject, "")
	}
	if r.ehelplyData != nil {
		localVarHeaderParams["ehelply-data"] = parameterToString(*r.ehelplyData, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDetachEntityFromAppointmentRequest struct {
	ctx context.Context
	ApiService *AppointmentsApiService
	appointmentUuid string
	entityUuid string
	xAccessToken *string
	xSecretToken *string
	authorization *string
	ehelplyActiveParticipant *string
	ehelplyProject *string
	ehelplyData *string
}

func (r ApiDetachEntityFromAppointmentRequest) XAccessToken(xAccessToken string) ApiDetachEntityFromAppointmentRequest {
	r.xAccessToken = &xAccessToken
	return r
}

func (r ApiDetachEntityFromAppointmentRequest) XSecretToken(xSecretToken string) ApiDetachEntityFromAppointmentRequest {
	r.xSecretToken = &xSecretToken
	return r
}

func (r ApiDetachEntityFromAppointmentRequest) Authorization(authorization string) ApiDetachEntityFromAppointmentRequest {
	r.authorization = &authorization
	return r
}

func (r ApiDetachEntityFromAppointmentRequest) EhelplyActiveParticipant(ehelplyActiveParticipant string) ApiDetachEntityFromAppointmentRequest {
	r.ehelplyActiveParticipant = &ehelplyActiveParticipant
	return r
}

func (r ApiDetachEntityFromAppointmentRequest) EhelplyProject(ehelplyProject string) ApiDetachEntityFromAppointmentRequest {
	r.ehelplyProject = &ehelplyProject
	return r
}

func (r ApiDetachEntityFromAppointmentRequest) EhelplyData(ehelplyData string) ApiDetachEntityFromAppointmentRequest {
	r.ehelplyData = &ehelplyData
	return r
}

func (r ApiDetachEntityFromAppointmentRequest) Execute() (bool, *http.Response, error) {
	return r.ApiService.DetachEntityFromAppointmentExecute(r)
}

/*
DetachEntityFromAppointment Removeentityfromappointment

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param appointmentUuid
 @param entityUuid
 @return ApiDetachEntityFromAppointmentRequest
*/
func (a *AppointmentsApiService) DetachEntityFromAppointment(ctx context.Context, appointmentUuid string, entityUuid string) ApiDetachEntityFromAppointmentRequest {
	return ApiDetachEntityFromAppointmentRequest{
		ApiService: a,
		ctx: ctx,
		appointmentUuid: appointmentUuid,
		entityUuid: entityUuid,
	}
}

// Execute executes the request
//  @return bool
func (a *AppointmentsApiService) DetachEntityFromAppointmentExecute(r ApiDetachEntityFromAppointmentRequest) (bool, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  bool
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppointmentsApiService.DetachEntityFromAppointment")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/appointments/appointments/{appointment_uuid}/entities/{entity_uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"appointment_uuid"+"}", url.PathEscape(parameterToString(r.appointmentUuid, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"entity_uuid"+"}", url.PathEscape(parameterToString(r.entityUuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xAccessToken != nil {
		localVarHeaderParams["x-access-token"] = parameterToString(*r.xAccessToken, "")
	}
	if r.xSecretToken != nil {
		localVarHeaderParams["x-secret-token"] = parameterToString(*r.xSecretToken, "")
	}
	if r.authorization != nil {
		localVarHeaderParams["authorization"] = parameterToString(*r.authorization, "")
	}
	if r.ehelplyActiveParticipant != nil {
		localVarHeaderParams["ehelply-active-participant"] = parameterToString(*r.ehelplyActiveParticipant, "")
	}
	if r.ehelplyProject != nil {
		localVarHeaderParams["ehelply-project"] = parameterToString(*r.ehelplyProject, "")
	}
	if r.ehelplyData != nil {
		localVarHeaderParams["ehelply-data"] = parameterToString(*r.ehelplyData, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAppointmentRequest struct {
	ctx context.Context
	ApiService *AppointmentsApiService
	appointmentUuid string
	xAccessToken *string
	xSecretToken *string
	authorization *string
	ehelplyActiveParticipant *string
	ehelplyProject *string
	ehelplyData *string
}

func (r ApiGetAppointmentRequest) XAccessToken(xAccessToken string) ApiGetAppointmentRequest {
	r.xAccessToken = &xAccessToken
	return r
}

func (r ApiGetAppointmentRequest) XSecretToken(xSecretToken string) ApiGetAppointmentRequest {
	r.xSecretToken = &xSecretToken
	return r
}

func (r ApiGetAppointmentRequest) Authorization(authorization string) ApiGetAppointmentRequest {
	r.authorization = &authorization
	return r
}

func (r ApiGetAppointmentRequest) EhelplyActiveParticipant(ehelplyActiveParticipant string) ApiGetAppointmentRequest {
	r.ehelplyActiveParticipant = &ehelplyActiveParticipant
	return r
}

func (r ApiGetAppointmentRequest) EhelplyProject(ehelplyProject string) ApiGetAppointmentRequest {
	r.ehelplyProject = &ehelplyProject
	return r
}

func (r ApiGetAppointmentRequest) EhelplyData(ehelplyData string) ApiGetAppointmentRequest {
	r.ehelplyData = &ehelplyData
	return r
}

func (r ApiGetAppointmentRequest) Execute() (*AppointmentResponse, *http.Response, error) {
	return r.ApiService.GetAppointmentExecute(r)
}

/*
GetAppointment Getappointment

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param appointmentUuid
 @return ApiGetAppointmentRequest
*/
func (a *AppointmentsApiService) GetAppointment(ctx context.Context, appointmentUuid string) ApiGetAppointmentRequest {
	return ApiGetAppointmentRequest{
		ApiService: a,
		ctx: ctx,
		appointmentUuid: appointmentUuid,
	}
}

// Execute executes the request
//  @return AppointmentResponse
func (a *AppointmentsApiService) GetAppointmentExecute(r ApiGetAppointmentRequest) (*AppointmentResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppointmentResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppointmentsApiService.GetAppointment")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/appointments/appointments/{appointment_uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"appointment_uuid"+"}", url.PathEscape(parameterToString(r.appointmentUuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xAccessToken != nil {
		localVarHeaderParams["x-access-token"] = parameterToString(*r.xAccessToken, "")
	}
	if r.xSecretToken != nil {
		localVarHeaderParams["x-secret-token"] = parameterToString(*r.xSecretToken, "")
	}
	if r.authorization != nil {
		localVarHeaderParams["authorization"] = parameterToString(*r.authorization, "")
	}
	if r.ehelplyActiveParticipant != nil {
		localVarHeaderParams["ehelply-active-participant"] = parameterToString(*r.ehelplyActiveParticipant, "")
	}
	if r.ehelplyProject != nil {
		localVarHeaderParams["ehelply-project"] = parameterToString(*r.ehelplyProject, "")
	}
	if r.ehelplyData != nil {
		localVarHeaderParams["ehelply-data"] = parameterToString(*r.ehelplyData, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v GetAppointment403Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v GetAppointment403Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchAppointmentRequest struct {
	ctx context.Context
	ApiService *AppointmentsApiService
	placeUuid *string
	excludeCancelled *bool
	isDeleted *bool
	startRange *string
	endRange *string
	page *int32
	pageSize *int32
	sortOn *string
	sortDesc *bool
	xAccessToken *string
	xSecretToken *string
	authorization *string
	ehelplyActiveParticipant *string
	ehelplyProject *string
	ehelplyData *string
}

func (r ApiSearchAppointmentRequest) PlaceUuid(placeUuid string) ApiSearchAppointmentRequest {
	r.placeUuid = &placeUuid
	return r
}

func (r ApiSearchAppointmentRequest) ExcludeCancelled(excludeCancelled bool) ApiSearchAppointmentRequest {
	r.excludeCancelled = &excludeCancelled
	return r
}

func (r ApiSearchAppointmentRequest) IsDeleted(isDeleted bool) ApiSearchAppointmentRequest {
	r.isDeleted = &isDeleted
	return r
}

func (r ApiSearchAppointmentRequest) StartRange(startRange string) ApiSearchAppointmentRequest {
	r.startRange = &startRange
	return r
}

func (r ApiSearchAppointmentRequest) EndRange(endRange string) ApiSearchAppointmentRequest {
	r.endRange = &endRange
	return r
}

func (r ApiSearchAppointmentRequest) Page(page int32) ApiSearchAppointmentRequest {
	r.page = &page
	return r
}

func (r ApiSearchAppointmentRequest) PageSize(pageSize int32) ApiSearchAppointmentRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiSearchAppointmentRequest) SortOn(sortOn string) ApiSearchAppointmentRequest {
	r.sortOn = &sortOn
	return r
}

func (r ApiSearchAppointmentRequest) SortDesc(sortDesc bool) ApiSearchAppointmentRequest {
	r.sortDesc = &sortDesc
	return r
}

func (r ApiSearchAppointmentRequest) XAccessToken(xAccessToken string) ApiSearchAppointmentRequest {
	r.xAccessToken = &xAccessToken
	return r
}

func (r ApiSearchAppointmentRequest) XSecretToken(xSecretToken string) ApiSearchAppointmentRequest {
	r.xSecretToken = &xSecretToken
	return r
}

func (r ApiSearchAppointmentRequest) Authorization(authorization string) ApiSearchAppointmentRequest {
	r.authorization = &authorization
	return r
}

func (r ApiSearchAppointmentRequest) EhelplyActiveParticipant(ehelplyActiveParticipant string) ApiSearchAppointmentRequest {
	r.ehelplyActiveParticipant = &ehelplyActiveParticipant
	return r
}

func (r ApiSearchAppointmentRequest) EhelplyProject(ehelplyProject string) ApiSearchAppointmentRequest {
	r.ehelplyProject = &ehelplyProject
	return r
}

func (r ApiSearchAppointmentRequest) EhelplyData(ehelplyData string) ApiSearchAppointmentRequest {
	r.ehelplyData = &ehelplyData
	return r
}

func (r ApiSearchAppointmentRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.SearchAppointmentExecute(r)
}

/*
SearchAppointment Searchappointments

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSearchAppointmentRequest
*/
func (a *AppointmentsApiService) SearchAppointment(ctx context.Context) ApiSearchAppointmentRequest {
	return ApiSearchAppointmentRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return interface{}
func (a *AppointmentsApiService) SearchAppointmentExecute(r ApiSearchAppointmentRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppointmentsApiService.SearchAppointment")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/appointments/appointments"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.placeUuid != nil {
		localVarQueryParams.Add("place_uuid", parameterToString(*r.placeUuid, ""))
	}
	if r.excludeCancelled != nil {
		localVarQueryParams.Add("exclude_cancelled", parameterToString(*r.excludeCancelled, ""))
	}
	if r.isDeleted != nil {
		localVarQueryParams.Add("is_deleted", parameterToString(*r.isDeleted, ""))
	}
	if r.startRange != nil {
		localVarQueryParams.Add("start_range", parameterToString(*r.startRange, ""))
	}
	if r.endRange != nil {
		localVarQueryParams.Add("end_range", parameterToString(*r.endRange, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("page_size", parameterToString(*r.pageSize, ""))
	}
	if r.sortOn != nil {
		localVarQueryParams.Add("sort_on", parameterToString(*r.sortOn, ""))
	}
	if r.sortDesc != nil {
		localVarQueryParams.Add("sort_desc", parameterToString(*r.sortDesc, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xAccessToken != nil {
		localVarHeaderParams["x-access-token"] = parameterToString(*r.xAccessToken, "")
	}
	if r.xSecretToken != nil {
		localVarHeaderParams["x-secret-token"] = parameterToString(*r.xSecretToken, "")
	}
	if r.authorization != nil {
		localVarHeaderParams["authorization"] = parameterToString(*r.authorization, "")
	}
	if r.ehelplyActiveParticipant != nil {
		localVarHeaderParams["ehelply-active-participant"] = parameterToString(*r.ehelplyActiveParticipant, "")
	}
	if r.ehelplyProject != nil {
		localVarHeaderParams["ehelply-project"] = parameterToString(*r.ehelplyProject, "")
	}
	if r.ehelplyData != nil {
		localVarHeaderParams["ehelply-data"] = parameterToString(*r.ehelplyData, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchAppointmentEntitiesRequest struct {
	ctx context.Context
	ApiService *AppointmentsApiService
	appointmentUuid string
	page *int32
	pageSize *int32
	sortOn *string
	sortDesc *bool
	search *string
	searchOn *string
	xAccessToken *string
	xSecretToken *string
	authorization *string
	ehelplyActiveParticipant *string
	ehelplyProject *string
	ehelplyData *string
}

func (r ApiSearchAppointmentEntitiesRequest) Page(page int32) ApiSearchAppointmentEntitiesRequest {
	r.page = &page
	return r
}

func (r ApiSearchAppointmentEntitiesRequest) PageSize(pageSize int32) ApiSearchAppointmentEntitiesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiSearchAppointmentEntitiesRequest) SortOn(sortOn string) ApiSearchAppointmentEntitiesRequest {
	r.sortOn = &sortOn
	return r
}

func (r ApiSearchAppointmentEntitiesRequest) SortDesc(sortDesc bool) ApiSearchAppointmentEntitiesRequest {
	r.sortDesc = &sortDesc
	return r
}

func (r ApiSearchAppointmentEntitiesRequest) Search(search string) ApiSearchAppointmentEntitiesRequest {
	r.search = &search
	return r
}

func (r ApiSearchAppointmentEntitiesRequest) SearchOn(searchOn string) ApiSearchAppointmentEntitiesRequest {
	r.searchOn = &searchOn
	return r
}

func (r ApiSearchAppointmentEntitiesRequest) XAccessToken(xAccessToken string) ApiSearchAppointmentEntitiesRequest {
	r.xAccessToken = &xAccessToken
	return r
}

func (r ApiSearchAppointmentEntitiesRequest) XSecretToken(xSecretToken string) ApiSearchAppointmentEntitiesRequest {
	r.xSecretToken = &xSecretToken
	return r
}

func (r ApiSearchAppointmentEntitiesRequest) Authorization(authorization string) ApiSearchAppointmentEntitiesRequest {
	r.authorization = &authorization
	return r
}

func (r ApiSearchAppointmentEntitiesRequest) EhelplyActiveParticipant(ehelplyActiveParticipant string) ApiSearchAppointmentEntitiesRequest {
	r.ehelplyActiveParticipant = &ehelplyActiveParticipant
	return r
}

func (r ApiSearchAppointmentEntitiesRequest) EhelplyProject(ehelplyProject string) ApiSearchAppointmentEntitiesRequest {
	r.ehelplyProject = &ehelplyProject
	return r
}

func (r ApiSearchAppointmentEntitiesRequest) EhelplyData(ehelplyData string) ApiSearchAppointmentEntitiesRequest {
	r.ehelplyData = &ehelplyData
	return r
}

func (r ApiSearchAppointmentEntitiesRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.SearchAppointmentEntitiesExecute(r)
}

/*
SearchAppointmentEntities Searchappointmententities

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param appointmentUuid
 @return ApiSearchAppointmentEntitiesRequest
*/
func (a *AppointmentsApiService) SearchAppointmentEntities(ctx context.Context, appointmentUuid string) ApiSearchAppointmentEntitiesRequest {
	return ApiSearchAppointmentEntitiesRequest{
		ApiService: a,
		ctx: ctx,
		appointmentUuid: appointmentUuid,
	}
}

// Execute executes the request
//  @return interface{}
func (a *AppointmentsApiService) SearchAppointmentEntitiesExecute(r ApiSearchAppointmentEntitiesRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppointmentsApiService.SearchAppointmentEntities")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/appointments/appointments/{appointment_uuid}/entities"
	localVarPath = strings.Replace(localVarPath, "{"+"appointment_uuid"+"}", url.PathEscape(parameterToString(r.appointmentUuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("page_size", parameterToString(*r.pageSize, ""))
	}
	if r.sortOn != nil {
		localVarQueryParams.Add("sort_on", parameterToString(*r.sortOn, ""))
	}
	if r.sortDesc != nil {
		localVarQueryParams.Add("sort_desc", parameterToString(*r.sortDesc, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("search", parameterToString(*r.search, ""))
	}
	if r.searchOn != nil {
		localVarQueryParams.Add("search_on", parameterToString(*r.searchOn, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xAccessToken != nil {
		localVarHeaderParams["x-access-token"] = parameterToString(*r.xAccessToken, "")
	}
	if r.xSecretToken != nil {
		localVarHeaderParams["x-secret-token"] = parameterToString(*r.xSecretToken, "")
	}
	if r.authorization != nil {
		localVarHeaderParams["authorization"] = parameterToString(*r.authorization, "")
	}
	if r.ehelplyActiveParticipant != nil {
		localVarHeaderParams["ehelply-active-participant"] = parameterToString(*r.ehelplyActiveParticipant, "")
	}
	if r.ehelplyProject != nil {
		localVarHeaderParams["ehelply-project"] = parameterToString(*r.ehelplyProject, "")
	}
	if r.ehelplyData != nil {
		localVarHeaderParams["ehelply-data"] = parameterToString(*r.ehelplyData, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchEntityAppointmentsRequest struct {
	ctx context.Context
	ApiService *AppointmentsApiService
	entityUuid string
	startDate *string
	endDate *string
	excludeCancelled *bool
	xAccessToken *string
	xSecretToken *string
	authorization *string
	ehelplyActiveParticipant *string
	ehelplyProject *string
	ehelplyData *string
}

func (r ApiSearchEntityAppointmentsRequest) StartDate(startDate string) ApiSearchEntityAppointmentsRequest {
	r.startDate = &startDate
	return r
}

func (r ApiSearchEntityAppointmentsRequest) EndDate(endDate string) ApiSearchEntityAppointmentsRequest {
	r.endDate = &endDate
	return r
}

func (r ApiSearchEntityAppointmentsRequest) ExcludeCancelled(excludeCancelled bool) ApiSearchEntityAppointmentsRequest {
	r.excludeCancelled = &excludeCancelled
	return r
}

func (r ApiSearchEntityAppointmentsRequest) XAccessToken(xAccessToken string) ApiSearchEntityAppointmentsRequest {
	r.xAccessToken = &xAccessToken
	return r
}

func (r ApiSearchEntityAppointmentsRequest) XSecretToken(xSecretToken string) ApiSearchEntityAppointmentsRequest {
	r.xSecretToken = &xSecretToken
	return r
}

func (r ApiSearchEntityAppointmentsRequest) Authorization(authorization string) ApiSearchEntityAppointmentsRequest {
	r.authorization = &authorization
	return r
}

func (r ApiSearchEntityAppointmentsRequest) EhelplyActiveParticipant(ehelplyActiveParticipant string) ApiSearchEntityAppointmentsRequest {
	r.ehelplyActiveParticipant = &ehelplyActiveParticipant
	return r
}

func (r ApiSearchEntityAppointmentsRequest) EhelplyProject(ehelplyProject string) ApiSearchEntityAppointmentsRequest {
	r.ehelplyProject = &ehelplyProject
	return r
}

func (r ApiSearchEntityAppointmentsRequest) EhelplyData(ehelplyData string) ApiSearchEntityAppointmentsRequest {
	r.ehelplyData = &ehelplyData
	return r
}

func (r ApiSearchEntityAppointmentsRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.SearchEntityAppointmentsExecute(r)
}

/*
SearchEntityAppointments Getentityappointments

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param entityUuid
 @return ApiSearchEntityAppointmentsRequest
*/
func (a *AppointmentsApiService) SearchEntityAppointments(ctx context.Context, entityUuid string) ApiSearchEntityAppointmentsRequest {
	return ApiSearchEntityAppointmentsRequest{
		ApiService: a,
		ctx: ctx,
		entityUuid: entityUuid,
	}
}

// Execute executes the request
//  @return interface{}
func (a *AppointmentsApiService) SearchEntityAppointmentsExecute(r ApiSearchEntityAppointmentsRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppointmentsApiService.SearchEntityAppointments")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/appointments/appointments/entities/{entity_uuid}/appointments"
	localVarPath = strings.Replace(localVarPath, "{"+"entity_uuid"+"}", url.PathEscape(parameterToString(r.entityUuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startDate != nil {
		localVarQueryParams.Add("start_date", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("end_date", parameterToString(*r.endDate, ""))
	}
	if r.excludeCancelled != nil {
		localVarQueryParams.Add("exclude_cancelled", parameterToString(*r.excludeCancelled, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xAccessToken != nil {
		localVarHeaderParams["x-access-token"] = parameterToString(*r.xAccessToken, "")
	}
	if r.xSecretToken != nil {
		localVarHeaderParams["x-secret-token"] = parameterToString(*r.xSecretToken, "")
	}
	if r.authorization != nil {
		localVarHeaderParams["authorization"] = parameterToString(*r.authorization, "")
	}
	if r.ehelplyActiveParticipant != nil {
		localVarHeaderParams["ehelply-active-participant"] = parameterToString(*r.ehelplyActiveParticipant, "")
	}
	if r.ehelplyProject != nil {
		localVarHeaderParams["ehelply-project"] = parameterToString(*r.ehelplyProject, "")
	}
	if r.ehelplyData != nil {
		localVarHeaderParams["ehelply-data"] = parameterToString(*r.ehelplyData, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateAppointmentRequest struct {
	ctx context.Context
	ApiService *AppointmentsApiService
	appointmentUuid string
	appointmentBase *AppointmentBase
	xAccessToken *string
	xSecretToken *string
	authorization *string
	ehelplyActiveParticipant *string
	ehelplyProject *string
	ehelplyData *string
}

func (r ApiUpdateAppointmentRequest) AppointmentBase(appointmentBase AppointmentBase) ApiUpdateAppointmentRequest {
	r.appointmentBase = &appointmentBase
	return r
}

func (r ApiUpdateAppointmentRequest) XAccessToken(xAccessToken string) ApiUpdateAppointmentRequest {
	r.xAccessToken = &xAccessToken
	return r
}

func (r ApiUpdateAppointmentRequest) XSecretToken(xSecretToken string) ApiUpdateAppointmentRequest {
	r.xSecretToken = &xSecretToken
	return r
}

func (r ApiUpdateAppointmentRequest) Authorization(authorization string) ApiUpdateAppointmentRequest {
	r.authorization = &authorization
	return r
}

func (r ApiUpdateAppointmentRequest) EhelplyActiveParticipant(ehelplyActiveParticipant string) ApiUpdateAppointmentRequest {
	r.ehelplyActiveParticipant = &ehelplyActiveParticipant
	return r
}

func (r ApiUpdateAppointmentRequest) EhelplyProject(ehelplyProject string) ApiUpdateAppointmentRequest {
	r.ehelplyProject = &ehelplyProject
	return r
}

func (r ApiUpdateAppointmentRequest) EhelplyData(ehelplyData string) ApiUpdateAppointmentRequest {
	r.ehelplyData = &ehelplyData
	return r
}

func (r ApiUpdateAppointmentRequest) Execute() (*AppointmentResponse, *http.Response, error) {
	return r.ApiService.UpdateAppointmentExecute(r)
}

/*
UpdateAppointment Updateappointment

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param appointmentUuid
 @return ApiUpdateAppointmentRequest
*/
func (a *AppointmentsApiService) UpdateAppointment(ctx context.Context, appointmentUuid string) ApiUpdateAppointmentRequest {
	return ApiUpdateAppointmentRequest{
		ApiService: a,
		ctx: ctx,
		appointmentUuid: appointmentUuid,
	}
}

// Execute executes the request
//  @return AppointmentResponse
func (a *AppointmentsApiService) UpdateAppointmentExecute(r ApiUpdateAppointmentRequest) (*AppointmentResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppointmentResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppointmentsApiService.UpdateAppointment")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/appointments/appointments/{appointment_uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"appointment_uuid"+"}", url.PathEscape(parameterToString(r.appointmentUuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.appointmentBase == nil {
		return localVarReturnValue, nil, reportError("appointmentBase is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xAccessToken != nil {
		localVarHeaderParams["x-access-token"] = parameterToString(*r.xAccessToken, "")
	}
	if r.xSecretToken != nil {
		localVarHeaderParams["x-secret-token"] = parameterToString(*r.xSecretToken, "")
	}
	if r.authorization != nil {
		localVarHeaderParams["authorization"] = parameterToString(*r.authorization, "")
	}
	if r.ehelplyActiveParticipant != nil {
		localVarHeaderParams["ehelply-active-participant"] = parameterToString(*r.ehelplyActiveParticipant, "")
	}
	if r.ehelplyProject != nil {
		localVarHeaderParams["ehelply-project"] = parameterToString(*r.ehelplyProject, "")
	}
	if r.ehelplyData != nil {
		localVarHeaderParams["ehelply-data"] = parameterToString(*r.ehelplyData, "")
	}
	// body params
	localVarPostBody = r.appointmentBase
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v GetAppointment403Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v GetAppointment403Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
