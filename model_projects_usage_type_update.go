/*
eHelply SDK - 1.1.107

eHelply SDK for SuperStack Services

API version: 1.1.107
Contact: support@ehelply.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ehelply

import (
	"encoding/json"
)

// ProjectsUsageTypeUpdate Used for update endpoint
type ProjectsUsageTypeUpdate struct {
	Name *string `json:"name,omitempty"`
	Summary *string `json:"summary,omitempty"`
	Category *string `json:"category,omitempty"`
	Service *string `json:"service,omitempty"`
	UnitPrices []ProjectsUsageTypeUnitPrice `json:"unit_prices,omitempty"`
}

// NewProjectsUsageTypeUpdate instantiates a new ProjectsUsageTypeUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectsUsageTypeUpdate() *ProjectsUsageTypeUpdate {
	this := ProjectsUsageTypeUpdate{}
	return &this
}

// NewProjectsUsageTypeUpdateWithDefaults instantiates a new ProjectsUsageTypeUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectsUsageTypeUpdateWithDefaults() *ProjectsUsageTypeUpdate {
	this := ProjectsUsageTypeUpdate{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ProjectsUsageTypeUpdate) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectsUsageTypeUpdate) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ProjectsUsageTypeUpdate) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ProjectsUsageTypeUpdate) SetName(v string) {
	o.Name = &v
}

// GetSummary returns the Summary field value if set, zero value otherwise.
func (o *ProjectsUsageTypeUpdate) GetSummary() string {
	if o == nil || o.Summary == nil {
		var ret string
		return ret
	}
	return *o.Summary
}

// GetSummaryOk returns a tuple with the Summary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectsUsageTypeUpdate) GetSummaryOk() (*string, bool) {
	if o == nil || o.Summary == nil {
		return nil, false
	}
	return o.Summary, true
}

// HasSummary returns a boolean if a field has been set.
func (o *ProjectsUsageTypeUpdate) HasSummary() bool {
	if o != nil && o.Summary != nil {
		return true
	}

	return false
}

// SetSummary gets a reference to the given string and assigns it to the Summary field.
func (o *ProjectsUsageTypeUpdate) SetSummary(v string) {
	o.Summary = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *ProjectsUsageTypeUpdate) GetCategory() string {
	if o == nil || o.Category == nil {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectsUsageTypeUpdate) GetCategoryOk() (*string, bool) {
	if o == nil || o.Category == nil {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *ProjectsUsageTypeUpdate) HasCategory() bool {
	if o != nil && o.Category != nil {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *ProjectsUsageTypeUpdate) SetCategory(v string) {
	o.Category = &v
}

// GetService returns the Service field value if set, zero value otherwise.
func (o *ProjectsUsageTypeUpdate) GetService() string {
	if o == nil || o.Service == nil {
		var ret string
		return ret
	}
	return *o.Service
}

// GetServiceOk returns a tuple with the Service field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectsUsageTypeUpdate) GetServiceOk() (*string, bool) {
	if o == nil || o.Service == nil {
		return nil, false
	}
	return o.Service, true
}

// HasService returns a boolean if a field has been set.
func (o *ProjectsUsageTypeUpdate) HasService() bool {
	if o != nil && o.Service != nil {
		return true
	}

	return false
}

// SetService gets a reference to the given string and assigns it to the Service field.
func (o *ProjectsUsageTypeUpdate) SetService(v string) {
	o.Service = &v
}

// GetUnitPrices returns the UnitPrices field value if set, zero value otherwise.
func (o *ProjectsUsageTypeUpdate) GetUnitPrices() []ProjectsUsageTypeUnitPrice {
	if o == nil || o.UnitPrices == nil {
		var ret []ProjectsUsageTypeUnitPrice
		return ret
	}
	return o.UnitPrices
}

// GetUnitPricesOk returns a tuple with the UnitPrices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectsUsageTypeUpdate) GetUnitPricesOk() ([]ProjectsUsageTypeUnitPrice, bool) {
	if o == nil || o.UnitPrices == nil {
		return nil, false
	}
	return o.UnitPrices, true
}

// HasUnitPrices returns a boolean if a field has been set.
func (o *ProjectsUsageTypeUpdate) HasUnitPrices() bool {
	if o != nil && o.UnitPrices != nil {
		return true
	}

	return false
}

// SetUnitPrices gets a reference to the given []ProjectsUsageTypeUnitPrice and assigns it to the UnitPrices field.
func (o *ProjectsUsageTypeUpdate) SetUnitPrices(v []ProjectsUsageTypeUnitPrice) {
	o.UnitPrices = v
}

func (o ProjectsUsageTypeUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Summary != nil {
		toSerialize["summary"] = o.Summary
	}
	if o.Category != nil {
		toSerialize["category"] = o.Category
	}
	if o.Service != nil {
		toSerialize["service"] = o.Service
	}
	if o.UnitPrices != nil {
		toSerialize["unit_prices"] = o.UnitPrices
	}
	return json.Marshal(toSerialize)
}

type NullableProjectsUsageTypeUpdate struct {
	value *ProjectsUsageTypeUpdate
	isSet bool
}

func (v NullableProjectsUsageTypeUpdate) Get() *ProjectsUsageTypeUpdate {
	return v.value
}

func (v *NullableProjectsUsageTypeUpdate) Set(val *ProjectsUsageTypeUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectsUsageTypeUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectsUsageTypeUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectsUsageTypeUpdate(val *ProjectsUsageTypeUpdate) *NullableProjectsUsageTypeUpdate {
	return &NullableProjectsUsageTypeUpdate{value: val, isSet: true}
}

func (v NullableProjectsUsageTypeUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectsUsageTypeUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


