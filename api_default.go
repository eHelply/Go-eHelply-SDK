/*
eHelply SDK - 1.1.98

eHelply SDK for SuperStack Services

API version: 1.1.98
Contact: support@ehelply.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ehelply

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// DefaultApiService DefaultApi service
type DefaultApiService service

type ApiAttachEntityToAppointmentRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	appointmentUuid string
	entityUuid string
	xAccessToken *string
	xSecretToken *string
	authorization *string
	ehelplyActiveParticipant *string
	ehelplyProject *string
	ehelplyData *string
}

func (r ApiAttachEntityToAppointmentRequest) XAccessToken(xAccessToken string) ApiAttachEntityToAppointmentRequest {
	r.xAccessToken = &xAccessToken
	return r
}

func (r ApiAttachEntityToAppointmentRequest) XSecretToken(xSecretToken string) ApiAttachEntityToAppointmentRequest {
	r.xSecretToken = &xSecretToken
	return r
}

func (r ApiAttachEntityToAppointmentRequest) Authorization(authorization string) ApiAttachEntityToAppointmentRequest {
	r.authorization = &authorization
	return r
}

func (r ApiAttachEntityToAppointmentRequest) EhelplyActiveParticipant(ehelplyActiveParticipant string) ApiAttachEntityToAppointmentRequest {
	r.ehelplyActiveParticipant = &ehelplyActiveParticipant
	return r
}

func (r ApiAttachEntityToAppointmentRequest) EhelplyProject(ehelplyProject string) ApiAttachEntityToAppointmentRequest {
	r.ehelplyProject = &ehelplyProject
	return r
}

func (r ApiAttachEntityToAppointmentRequest) EhelplyData(ehelplyData string) ApiAttachEntityToAppointmentRequest {
	r.ehelplyData = &ehelplyData
	return r
}

func (r ApiAttachEntityToAppointmentRequest) Execute() (bool, *http.Response, error) {
	return r.ApiService.AttachEntityToAppointmentExecute(r)
}

/*
AttachEntityToAppointment Attach Entity To Appointment

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param appointmentUuid
 @param entityUuid
 @return ApiAttachEntityToAppointmentRequest
*/
func (a *DefaultApiService) AttachEntityToAppointment(ctx context.Context, appointmentUuid string, entityUuid string) ApiAttachEntityToAppointmentRequest {
	return ApiAttachEntityToAppointmentRequest{
		ApiService: a,
		ctx: ctx,
		appointmentUuid: appointmentUuid,
		entityUuid: entityUuid,
	}
}

// Execute executes the request
//  @return bool
func (a *DefaultApiService) AttachEntityToAppointmentExecute(r ApiAttachEntityToAppointmentRequest) (bool, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  bool
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.AttachEntityToAppointment")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/appointments/appointments/{appointment_uuid}/entities/{entity_uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"appointment_uuid"+"}", url.PathEscape(parameterToString(r.appointmentUuid, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"entity_uuid"+"}", url.PathEscape(parameterToString(r.entityUuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xAccessToken != nil {
		localVarHeaderParams["x-access-token"] = parameterToString(*r.xAccessToken, "")
	}
	if r.xSecretToken != nil {
		localVarHeaderParams["x-secret-token"] = parameterToString(*r.xSecretToken, "")
	}
	if r.authorization != nil {
		localVarHeaderParams["authorization"] = parameterToString(*r.authorization, "")
	}
	if r.ehelplyActiveParticipant != nil {
		localVarHeaderParams["ehelply-active-participant"] = parameterToString(*r.ehelplyActiveParticipant, "")
	}
	if r.ehelplyProject != nil {
		localVarHeaderParams["ehelply-project"] = parameterToString(*r.ehelplyProject, "")
	}
	if r.ehelplyData != nil {
		localVarHeaderParams["ehelply-data"] = parameterToString(*r.ehelplyData, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAttachProductToCatalogRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	catalogUuid string
	productUuid string
	xAccessToken *string
	xSecretToken *string
	authorization *string
	ehelplyActiveParticipant *string
	ehelplyProject *string
	ehelplyData *string
}

func (r ApiAttachProductToCatalogRequest) XAccessToken(xAccessToken string) ApiAttachProductToCatalogRequest {
	r.xAccessToken = &xAccessToken
	return r
}

func (r ApiAttachProductToCatalogRequest) XSecretToken(xSecretToken string) ApiAttachProductToCatalogRequest {
	r.xSecretToken = &xSecretToken
	return r
}

func (r ApiAttachProductToCatalogRequest) Authorization(authorization string) ApiAttachProductToCatalogRequest {
	r.authorization = &authorization
	return r
}

func (r ApiAttachProductToCatalogRequest) EhelplyActiveParticipant(ehelplyActiveParticipant string) ApiAttachProductToCatalogRequest {
	r.ehelplyActiveParticipant = &ehelplyActiveParticipant
	return r
}

func (r ApiAttachProductToCatalogRequest) EhelplyProject(ehelplyProject string) ApiAttachProductToCatalogRequest {
	r.ehelplyProject = &ehelplyProject
	return r
}

func (r ApiAttachProductToCatalogRequest) EhelplyData(ehelplyData string) ApiAttachProductToCatalogRequest {
	r.ehelplyData = &ehelplyData
	return r
}

func (r ApiAttachProductToCatalogRequest) Execute() (bool, *http.Response, error) {
	return r.ApiService.AttachProductToCatalogExecute(r)
}

/*
AttachProductToCatalog Attach Product To Catalog

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param catalogUuid
 @param productUuid
 @return ApiAttachProductToCatalogRequest
*/
func (a *DefaultApiService) AttachProductToCatalog(ctx context.Context, catalogUuid string, productUuid string) ApiAttachProductToCatalogRequest {
	return ApiAttachProductToCatalogRequest{
		ApiService: a,
		ctx: ctx,
		catalogUuid: catalogUuid,
		productUuid: productUuid,
	}
}

// Execute executes the request
//  @return bool
func (a *DefaultApiService) AttachProductToCatalogExecute(r ApiAttachProductToCatalogRequest) (bool, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  bool
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.AttachProductToCatalog")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/products/catalogs/{catalog_uuid}/products/{product_uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"catalog_uuid"+"}", url.PathEscape(parameterToString(r.catalogUuid, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"product_uuid"+"}", url.PathEscape(parameterToString(r.productUuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xAccessToken != nil {
		localVarHeaderParams["x-access-token"] = parameterToString(*r.xAccessToken, "")
	}
	if r.xSecretToken != nil {
		localVarHeaderParams["x-secret-token"] = parameterToString(*r.xSecretToken, "")
	}
	if r.authorization != nil {
		localVarHeaderParams["authorization"] = parameterToString(*r.authorization, "")
	}
	if r.ehelplyActiveParticipant != nil {
		localVarHeaderParams["ehelply-active-participant"] = parameterToString(*r.ehelplyActiveParticipant, "")
	}
	if r.ehelplyProject != nil {
		localVarHeaderParams["ehelply-project"] = parameterToString(*r.ehelplyProject, "")
	}
	if r.ehelplyData != nil {
		localVarHeaderParams["ehelply-data"] = parameterToString(*r.ehelplyData, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateAppointmentRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	appointmentBase *AppointmentBase
	xAccessToken *string
	xSecretToken *string
	authorization *string
	ehelplyActiveParticipant *string
	ehelplyProject *string
	ehelplyData *string
}

func (r ApiCreateAppointmentRequest) AppointmentBase(appointmentBase AppointmentBase) ApiCreateAppointmentRequest {
	r.appointmentBase = &appointmentBase
	return r
}

func (r ApiCreateAppointmentRequest) XAccessToken(xAccessToken string) ApiCreateAppointmentRequest {
	r.xAccessToken = &xAccessToken
	return r
}

func (r ApiCreateAppointmentRequest) XSecretToken(xSecretToken string) ApiCreateAppointmentRequest {
	r.xSecretToken = &xSecretToken
	return r
}

func (r ApiCreateAppointmentRequest) Authorization(authorization string) ApiCreateAppointmentRequest {
	r.authorization = &authorization
	return r
}

func (r ApiCreateAppointmentRequest) EhelplyActiveParticipant(ehelplyActiveParticipant string) ApiCreateAppointmentRequest {
	r.ehelplyActiveParticipant = &ehelplyActiveParticipant
	return r
}

func (r ApiCreateAppointmentRequest) EhelplyProject(ehelplyProject string) ApiCreateAppointmentRequest {
	r.ehelplyProject = &ehelplyProject
	return r
}

func (r ApiCreateAppointmentRequest) EhelplyData(ehelplyData string) ApiCreateAppointmentRequest {
	r.ehelplyData = &ehelplyData
	return r
}

func (r ApiCreateAppointmentRequest) Execute() (*AppointmentResponse, *http.Response, error) {
	return r.ApiService.CreateAppointmentExecute(r)
}

/*
CreateAppointment Create Appointment

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateAppointmentRequest
*/
func (a *DefaultApiService) CreateAppointment(ctx context.Context) ApiCreateAppointmentRequest {
	return ApiCreateAppointmentRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AppointmentResponse
func (a *DefaultApiService) CreateAppointmentExecute(r ApiCreateAppointmentRequest) (*AppointmentResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppointmentResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateAppointment")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/appointments/appointments"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.appointmentBase == nil {
		return localVarReturnValue, nil, reportError("appointmentBase is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xAccessToken != nil {
		localVarHeaderParams["x-access-token"] = parameterToString(*r.xAccessToken, "")
	}
	if r.xSecretToken != nil {
		localVarHeaderParams["x-secret-token"] = parameterToString(*r.xSecretToken, "")
	}
	if r.authorization != nil {
		localVarHeaderParams["authorization"] = parameterToString(*r.authorization, "")
	}
	if r.ehelplyActiveParticipant != nil {
		localVarHeaderParams["ehelply-active-participant"] = parameterToString(*r.ehelplyActiveParticipant, "")
	}
	if r.ehelplyProject != nil {
		localVarHeaderParams["ehelply-project"] = parameterToString(*r.ehelplyProject, "")
	}
	if r.ehelplyData != nil {
		localVarHeaderParams["ehelply-data"] = parameterToString(*r.ehelplyData, "")
	}
	// body params
	localVarPostBody = r.appointmentBase
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateCatalogRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	catalogBase *CatalogBase
	xAccessToken *string
	xSecretToken *string
	authorization *string
	ehelplyActiveParticipant *string
	ehelplyProject *string
	ehelplyData *string
}

func (r ApiCreateCatalogRequest) CatalogBase(catalogBase CatalogBase) ApiCreateCatalogRequest {
	r.catalogBase = &catalogBase
	return r
}

func (r ApiCreateCatalogRequest) XAccessToken(xAccessToken string) ApiCreateCatalogRequest {
	r.xAccessToken = &xAccessToken
	return r
}

func (r ApiCreateCatalogRequest) XSecretToken(xSecretToken string) ApiCreateCatalogRequest {
	r.xSecretToken = &xSecretToken
	return r
}

func (r ApiCreateCatalogRequest) Authorization(authorization string) ApiCreateCatalogRequest {
	r.authorization = &authorization
	return r
}

func (r ApiCreateCatalogRequest) EhelplyActiveParticipant(ehelplyActiveParticipant string) ApiCreateCatalogRequest {
	r.ehelplyActiveParticipant = &ehelplyActiveParticipant
	return r
}

func (r ApiCreateCatalogRequest) EhelplyProject(ehelplyProject string) ApiCreateCatalogRequest {
	r.ehelplyProject = &ehelplyProject
	return r
}

func (r ApiCreateCatalogRequest) EhelplyData(ehelplyData string) ApiCreateCatalogRequest {
	r.ehelplyData = &ehelplyData
	return r
}

func (r ApiCreateCatalogRequest) Execute() (*CatalogReturn, *http.Response, error) {
	return r.ApiService.CreateCatalogExecute(r)
}

/*
CreateCatalog Create Catalog

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateCatalogRequest
*/
func (a *DefaultApiService) CreateCatalog(ctx context.Context) ApiCreateCatalogRequest {
	return ApiCreateCatalogRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CatalogReturn
func (a *DefaultApiService) CreateCatalogExecute(r ApiCreateCatalogRequest) (*CatalogReturn, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CatalogReturn
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateCatalog")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/products/catalogs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.catalogBase == nil {
		return localVarReturnValue, nil, reportError("catalogBase is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xAccessToken != nil {
		localVarHeaderParams["x-access-token"] = parameterToString(*r.xAccessToken, "")
	}
	if r.xSecretToken != nil {
		localVarHeaderParams["x-secret-token"] = parameterToString(*r.xSecretToken, "")
	}
	if r.authorization != nil {
		localVarHeaderParams["authorization"] = parameterToString(*r.authorization, "")
	}
	if r.ehelplyActiveParticipant != nil {
		localVarHeaderParams["ehelply-active-participant"] = parameterToString(*r.ehelplyActiveParticipant, "")
	}
	if r.ehelplyProject != nil {
		localVarHeaderParams["ehelply-project"] = parameterToString(*r.ehelplyProject, "")
	}
	if r.ehelplyData != nil {
		localVarHeaderParams["ehelply-data"] = parameterToString(*r.ehelplyData, "")
	}
	// body params
	localVarPostBody = r.catalogBase
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateProductRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	productBase *ProductBase
	xAccessToken *string
	xSecretToken *string
	authorization *string
	ehelplyActiveParticipant *string
	ehelplyProject *string
	ehelplyData *string
}

func (r ApiCreateProductRequest) ProductBase(productBase ProductBase) ApiCreateProductRequest {
	r.productBase = &productBase
	return r
}

func (r ApiCreateProductRequest) XAccessToken(xAccessToken string) ApiCreateProductRequest {
	r.xAccessToken = &xAccessToken
	return r
}

func (r ApiCreateProductRequest) XSecretToken(xSecretToken string) ApiCreateProductRequest {
	r.xSecretToken = &xSecretToken
	return r
}

func (r ApiCreateProductRequest) Authorization(authorization string) ApiCreateProductRequest {
	r.authorization = &authorization
	return r
}

func (r ApiCreateProductRequest) EhelplyActiveParticipant(ehelplyActiveParticipant string) ApiCreateProductRequest {
	r.ehelplyActiveParticipant = &ehelplyActiveParticipant
	return r
}

func (r ApiCreateProductRequest) EhelplyProject(ehelplyProject string) ApiCreateProductRequest {
	r.ehelplyProject = &ehelplyProject
	return r
}

func (r ApiCreateProductRequest) EhelplyData(ehelplyData string) ApiCreateProductRequest {
	r.ehelplyData = &ehelplyData
	return r
}

func (r ApiCreateProductRequest) Execute() (*ProductReturn, *http.Response, error) {
	return r.ApiService.CreateProductExecute(r)
}

/*
CreateProduct Create Product

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateProductRequest
*/
func (a *DefaultApiService) CreateProduct(ctx context.Context) ApiCreateProductRequest {
	return ApiCreateProductRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ProductReturn
func (a *DefaultApiService) CreateProductExecute(r ApiCreateProductRequest) (*ProductReturn, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProductReturn
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateProduct")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/products/products"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.productBase == nil {
		return localVarReturnValue, nil, reportError("productBase is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xAccessToken != nil {
		localVarHeaderParams["x-access-token"] = parameterToString(*r.xAccessToken, "")
	}
	if r.xSecretToken != nil {
		localVarHeaderParams["x-secret-token"] = parameterToString(*r.xSecretToken, "")
	}
	if r.authorization != nil {
		localVarHeaderParams["authorization"] = parameterToString(*r.authorization, "")
	}
	if r.ehelplyActiveParticipant != nil {
		localVarHeaderParams["ehelply-active-participant"] = parameterToString(*r.ehelplyActiveParticipant, "")
	}
	if r.ehelplyProject != nil {
		localVarHeaderParams["ehelply-project"] = parameterToString(*r.ehelplyProject, "")
	}
	if r.ehelplyData != nil {
		localVarHeaderParams["ehelply-data"] = parameterToString(*r.ehelplyData, "")
	}
	// body params
	localVarPostBody = r.productBase
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateReviewRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	entityType string
	entityUuid string
	createReview *CreateReview
	xAccessToken *string
	xSecretToken *string
	authorization *string
	ehelplyActiveParticipant *string
	ehelplyProject *string
	ehelplyData *string
}

func (r ApiCreateReviewRequest) CreateReview(createReview CreateReview) ApiCreateReviewRequest {
	r.createReview = &createReview
	return r
}

func (r ApiCreateReviewRequest) XAccessToken(xAccessToken string) ApiCreateReviewRequest {
	r.xAccessToken = &xAccessToken
	return r
}

func (r ApiCreateReviewRequest) XSecretToken(xSecretToken string) ApiCreateReviewRequest {
	r.xSecretToken = &xSecretToken
	return r
}

func (r ApiCreateReviewRequest) Authorization(authorization string) ApiCreateReviewRequest {
	r.authorization = &authorization
	return r
}

func (r ApiCreateReviewRequest) EhelplyActiveParticipant(ehelplyActiveParticipant string) ApiCreateReviewRequest {
	r.ehelplyActiveParticipant = &ehelplyActiveParticipant
	return r
}

func (r ApiCreateReviewRequest) EhelplyProject(ehelplyProject string) ApiCreateReviewRequest {
	r.ehelplyProject = &ehelplyProject
	return r
}

func (r ApiCreateReviewRequest) EhelplyData(ehelplyData string) ApiCreateReviewRequest {
	r.ehelplyData = &ehelplyData
	return r
}

func (r ApiCreateReviewRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.CreateReviewExecute(r)
}

/*
CreateReview Create Review

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param entityType
 @param entityUuid
 @return ApiCreateReviewRequest
*/
func (a *DefaultApiService) CreateReview(ctx context.Context, entityType string, entityUuid string) ApiCreateReviewRequest {
	return ApiCreateReviewRequest{
		ApiService: a,
		ctx: ctx,
		entityType: entityType,
		entityUuid: entityUuid,
	}
}

// Execute executes the request
//  @return interface{}
func (a *DefaultApiService) CreateReviewExecute(r ApiCreateReviewRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateReview")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/products/reviews/types/{entity_type}/entities/{entity_uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"entity_type"+"}", url.PathEscape(parameterToString(r.entityType, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"entity_uuid"+"}", url.PathEscape(parameterToString(r.entityUuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createReview == nil {
		return localVarReturnValue, nil, reportError("createReview is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xAccessToken != nil {
		localVarHeaderParams["x-access-token"] = parameterToString(*r.xAccessToken, "")
	}
	if r.xSecretToken != nil {
		localVarHeaderParams["x-secret-token"] = parameterToString(*r.xSecretToken, "")
	}
	if r.authorization != nil {
		localVarHeaderParams["authorization"] = parameterToString(*r.authorization, "")
	}
	if r.ehelplyActiveParticipant != nil {
		localVarHeaderParams["ehelply-active-participant"] = parameterToString(*r.ehelplyActiveParticipant, "")
	}
	if r.ehelplyProject != nil {
		localVarHeaderParams["ehelply-project"] = parameterToString(*r.ehelplyProject, "")
	}
	if r.ehelplyData != nil {
		localVarHeaderParams["ehelply-data"] = parameterToString(*r.ehelplyData, "")
	}
	// body params
	localVarPostBody = r.createReview
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteAppointmentRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	appointmentUuid string
	xAccessToken *string
	xSecretToken *string
	authorization *string
	ehelplyActiveParticipant *string
	ehelplyProject *string
	ehelplyData *string
}

func (r ApiDeleteAppointmentRequest) XAccessToken(xAccessToken string) ApiDeleteAppointmentRequest {
	r.xAccessToken = &xAccessToken
	return r
}

func (r ApiDeleteAppointmentRequest) XSecretToken(xSecretToken string) ApiDeleteAppointmentRequest {
	r.xSecretToken = &xSecretToken
	return r
}

func (r ApiDeleteAppointmentRequest) Authorization(authorization string) ApiDeleteAppointmentRequest {
	r.authorization = &authorization
	return r
}

func (r ApiDeleteAppointmentRequest) EhelplyActiveParticipant(ehelplyActiveParticipant string) ApiDeleteAppointmentRequest {
	r.ehelplyActiveParticipant = &ehelplyActiveParticipant
	return r
}

func (r ApiDeleteAppointmentRequest) EhelplyProject(ehelplyProject string) ApiDeleteAppointmentRequest {
	r.ehelplyProject = &ehelplyProject
	return r
}

func (r ApiDeleteAppointmentRequest) EhelplyData(ehelplyData string) ApiDeleteAppointmentRequest {
	r.ehelplyData = &ehelplyData
	return r
}

func (r ApiDeleteAppointmentRequest) Execute() (bool, *http.Response, error) {
	return r.ApiService.DeleteAppointmentExecute(r)
}

/*
DeleteAppointment Delete Appointment

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param appointmentUuid
 @return ApiDeleteAppointmentRequest
*/
func (a *DefaultApiService) DeleteAppointment(ctx context.Context, appointmentUuid string) ApiDeleteAppointmentRequest {
	return ApiDeleteAppointmentRequest{
		ApiService: a,
		ctx: ctx,
		appointmentUuid: appointmentUuid,
	}
}

// Execute executes the request
//  @return bool
func (a *DefaultApiService) DeleteAppointmentExecute(r ApiDeleteAppointmentRequest) (bool, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  bool
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DeleteAppointment")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/appointments/appointments/{appointment_uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"appointment_uuid"+"}", url.PathEscape(parameterToString(r.appointmentUuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xAccessToken != nil {
		localVarHeaderParams["x-access-token"] = parameterToString(*r.xAccessToken, "")
	}
	if r.xSecretToken != nil {
		localVarHeaderParams["x-secret-token"] = parameterToString(*r.xSecretToken, "")
	}
	if r.authorization != nil {
		localVarHeaderParams["authorization"] = parameterToString(*r.authorization, "")
	}
	if r.ehelplyActiveParticipant != nil {
		localVarHeaderParams["ehelply-active-participant"] = parameterToString(*r.ehelplyActiveParticipant, "")
	}
	if r.ehelplyProject != nil {
		localVarHeaderParams["ehelply-project"] = parameterToString(*r.ehelplyProject, "")
	}
	if r.ehelplyData != nil {
		localVarHeaderParams["ehelply-data"] = parameterToString(*r.ehelplyData, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteCatalogRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	catalogUuid string
	xAccessToken *string
	xSecretToken *string
	authorization *string
	ehelplyActiveParticipant *string
	ehelplyProject *string
	ehelplyData *string
}

func (r ApiDeleteCatalogRequest) XAccessToken(xAccessToken string) ApiDeleteCatalogRequest {
	r.xAccessToken = &xAccessToken
	return r
}

func (r ApiDeleteCatalogRequest) XSecretToken(xSecretToken string) ApiDeleteCatalogRequest {
	r.xSecretToken = &xSecretToken
	return r
}

func (r ApiDeleteCatalogRequest) Authorization(authorization string) ApiDeleteCatalogRequest {
	r.authorization = &authorization
	return r
}

func (r ApiDeleteCatalogRequest) EhelplyActiveParticipant(ehelplyActiveParticipant string) ApiDeleteCatalogRequest {
	r.ehelplyActiveParticipant = &ehelplyActiveParticipant
	return r
}

func (r ApiDeleteCatalogRequest) EhelplyProject(ehelplyProject string) ApiDeleteCatalogRequest {
	r.ehelplyProject = &ehelplyProject
	return r
}

func (r ApiDeleteCatalogRequest) EhelplyData(ehelplyData string) ApiDeleteCatalogRequest {
	r.ehelplyData = &ehelplyData
	return r
}

func (r ApiDeleteCatalogRequest) Execute() (bool, *http.Response, error) {
	return r.ApiService.DeleteCatalogExecute(r)
}

/*
DeleteCatalog Delete Catalog

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param catalogUuid
 @return ApiDeleteCatalogRequest
*/
func (a *DefaultApiService) DeleteCatalog(ctx context.Context, catalogUuid string) ApiDeleteCatalogRequest {
	return ApiDeleteCatalogRequest{
		ApiService: a,
		ctx: ctx,
		catalogUuid: catalogUuid,
	}
}

// Execute executes the request
//  @return bool
func (a *DefaultApiService) DeleteCatalogExecute(r ApiDeleteCatalogRequest) (bool, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  bool
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DeleteCatalog")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/products/catalogs/{catalog_uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"catalog_uuid"+"}", url.PathEscape(parameterToString(r.catalogUuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xAccessToken != nil {
		localVarHeaderParams["x-access-token"] = parameterToString(*r.xAccessToken, "")
	}
	if r.xSecretToken != nil {
		localVarHeaderParams["x-secret-token"] = parameterToString(*r.xSecretToken, "")
	}
	if r.authorization != nil {
		localVarHeaderParams["authorization"] = parameterToString(*r.authorization, "")
	}
	if r.ehelplyActiveParticipant != nil {
		localVarHeaderParams["ehelply-active-participant"] = parameterToString(*r.ehelplyActiveParticipant, "")
	}
	if r.ehelplyProject != nil {
		localVarHeaderParams["ehelply-project"] = parameterToString(*r.ehelplyProject, "")
	}
	if r.ehelplyData != nil {
		localVarHeaderParams["ehelply-data"] = parameterToString(*r.ehelplyData, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteProductRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	productUuid string
	xAccessToken *string
	xSecretToken *string
	authorization *string
	ehelplyActiveParticipant *string
	ehelplyProject *string
	ehelplyData *string
}

func (r ApiDeleteProductRequest) XAccessToken(xAccessToken string) ApiDeleteProductRequest {
	r.xAccessToken = &xAccessToken
	return r
}

func (r ApiDeleteProductRequest) XSecretToken(xSecretToken string) ApiDeleteProductRequest {
	r.xSecretToken = &xSecretToken
	return r
}

func (r ApiDeleteProductRequest) Authorization(authorization string) ApiDeleteProductRequest {
	r.authorization = &authorization
	return r
}

func (r ApiDeleteProductRequest) EhelplyActiveParticipant(ehelplyActiveParticipant string) ApiDeleteProductRequest {
	r.ehelplyActiveParticipant = &ehelplyActiveParticipant
	return r
}

func (r ApiDeleteProductRequest) EhelplyProject(ehelplyProject string) ApiDeleteProductRequest {
	r.ehelplyProject = &ehelplyProject
	return r
}

func (r ApiDeleteProductRequest) EhelplyData(ehelplyData string) ApiDeleteProductRequest {
	r.ehelplyData = &ehelplyData
	return r
}

func (r ApiDeleteProductRequest) Execute() (bool, *http.Response, error) {
	return r.ApiService.DeleteProductExecute(r)
}

/*
DeleteProduct Delete Product

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param productUuid
 @return ApiDeleteProductRequest
*/
func (a *DefaultApiService) DeleteProduct(ctx context.Context, productUuid string) ApiDeleteProductRequest {
	return ApiDeleteProductRequest{
		ApiService: a,
		ctx: ctx,
		productUuid: productUuid,
	}
}

// Execute executes the request
//  @return bool
func (a *DefaultApiService) DeleteProductExecute(r ApiDeleteProductRequest) (bool, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  bool
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DeleteProduct")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/products/products/{product_uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"product_uuid"+"}", url.PathEscape(parameterToString(r.productUuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xAccessToken != nil {
		localVarHeaderParams["x-access-token"] = parameterToString(*r.xAccessToken, "")
	}
	if r.xSecretToken != nil {
		localVarHeaderParams["x-secret-token"] = parameterToString(*r.xSecretToken, "")
	}
	if r.authorization != nil {
		localVarHeaderParams["authorization"] = parameterToString(*r.authorization, "")
	}
	if r.ehelplyActiveParticipant != nil {
		localVarHeaderParams["ehelply-active-participant"] = parameterToString(*r.ehelplyActiveParticipant, "")
	}
	if r.ehelplyProject != nil {
		localVarHeaderParams["ehelply-project"] = parameterToString(*r.ehelplyProject, "")
	}
	if r.ehelplyData != nil {
		localVarHeaderParams["ehelply-data"] = parameterToString(*r.ehelplyData, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteReviewRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	entityType string
	entityUuid string
	reviewUuid string
	xAccessToken *string
	xSecretToken *string
	authorization *string
	ehelplyActiveParticipant *string
	ehelplyProject *string
	ehelplyData *string
}

func (r ApiDeleteReviewRequest) XAccessToken(xAccessToken string) ApiDeleteReviewRequest {
	r.xAccessToken = &xAccessToken
	return r
}

func (r ApiDeleteReviewRequest) XSecretToken(xSecretToken string) ApiDeleteReviewRequest {
	r.xSecretToken = &xSecretToken
	return r
}

func (r ApiDeleteReviewRequest) Authorization(authorization string) ApiDeleteReviewRequest {
	r.authorization = &authorization
	return r
}

func (r ApiDeleteReviewRequest) EhelplyActiveParticipant(ehelplyActiveParticipant string) ApiDeleteReviewRequest {
	r.ehelplyActiveParticipant = &ehelplyActiveParticipant
	return r
}

func (r ApiDeleteReviewRequest) EhelplyProject(ehelplyProject string) ApiDeleteReviewRequest {
	r.ehelplyProject = &ehelplyProject
	return r
}

func (r ApiDeleteReviewRequest) EhelplyData(ehelplyData string) ApiDeleteReviewRequest {
	r.ehelplyData = &ehelplyData
	return r
}

func (r ApiDeleteReviewRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.DeleteReviewExecute(r)
}

/*
DeleteReview Delete Review

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param entityType
 @param entityUuid
 @param reviewUuid
 @return ApiDeleteReviewRequest
*/
func (a *DefaultApiService) DeleteReview(ctx context.Context, entityType string, entityUuid string, reviewUuid string) ApiDeleteReviewRequest {
	return ApiDeleteReviewRequest{
		ApiService: a,
		ctx: ctx,
		entityType: entityType,
		entityUuid: entityUuid,
		reviewUuid: reviewUuid,
	}
}

// Execute executes the request
//  @return interface{}
func (a *DefaultApiService) DeleteReviewExecute(r ApiDeleteReviewRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DeleteReview")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/products/reviews/types/{entity_type}/entities/{entity_uuid}/reviews/{review_uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"entity_type"+"}", url.PathEscape(parameterToString(r.entityType, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"entity_uuid"+"}", url.PathEscape(parameterToString(r.entityUuid, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"review_uuid"+"}", url.PathEscape(parameterToString(r.reviewUuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xAccessToken != nil {
		localVarHeaderParams["x-access-token"] = parameterToString(*r.xAccessToken, "")
	}
	if r.xSecretToken != nil {
		localVarHeaderParams["x-secret-token"] = parameterToString(*r.xSecretToken, "")
	}
	if r.authorization != nil {
		localVarHeaderParams["authorization"] = parameterToString(*r.authorization, "")
	}
	if r.ehelplyActiveParticipant != nil {
		localVarHeaderParams["ehelply-active-participant"] = parameterToString(*r.ehelplyActiveParticipant, "")
	}
	if r.ehelplyProject != nil {
		localVarHeaderParams["ehelply-project"] = parameterToString(*r.ehelplyProject, "")
	}
	if r.ehelplyData != nil {
		localVarHeaderParams["ehelply-data"] = parameterToString(*r.ehelplyData, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDetachEntityFromAppointmentRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	appointmentUuid string
	entityUuid string
	xAccessToken *string
	xSecretToken *string
	authorization *string
	ehelplyActiveParticipant *string
	ehelplyProject *string
	ehelplyData *string
}

func (r ApiDetachEntityFromAppointmentRequest) XAccessToken(xAccessToken string) ApiDetachEntityFromAppointmentRequest {
	r.xAccessToken = &xAccessToken
	return r
}

func (r ApiDetachEntityFromAppointmentRequest) XSecretToken(xSecretToken string) ApiDetachEntityFromAppointmentRequest {
	r.xSecretToken = &xSecretToken
	return r
}

func (r ApiDetachEntityFromAppointmentRequest) Authorization(authorization string) ApiDetachEntityFromAppointmentRequest {
	r.authorization = &authorization
	return r
}

func (r ApiDetachEntityFromAppointmentRequest) EhelplyActiveParticipant(ehelplyActiveParticipant string) ApiDetachEntityFromAppointmentRequest {
	r.ehelplyActiveParticipant = &ehelplyActiveParticipant
	return r
}

func (r ApiDetachEntityFromAppointmentRequest) EhelplyProject(ehelplyProject string) ApiDetachEntityFromAppointmentRequest {
	r.ehelplyProject = &ehelplyProject
	return r
}

func (r ApiDetachEntityFromAppointmentRequest) EhelplyData(ehelplyData string) ApiDetachEntityFromAppointmentRequest {
	r.ehelplyData = &ehelplyData
	return r
}

func (r ApiDetachEntityFromAppointmentRequest) Execute() (bool, *http.Response, error) {
	return r.ApiService.DetachEntityFromAppointmentExecute(r)
}

/*
DetachEntityFromAppointment Detach Entity From Appointment

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param appointmentUuid
 @param entityUuid
 @return ApiDetachEntityFromAppointmentRequest
*/
func (a *DefaultApiService) DetachEntityFromAppointment(ctx context.Context, appointmentUuid string, entityUuid string) ApiDetachEntityFromAppointmentRequest {
	return ApiDetachEntityFromAppointmentRequest{
		ApiService: a,
		ctx: ctx,
		appointmentUuid: appointmentUuid,
		entityUuid: entityUuid,
	}
}

// Execute executes the request
//  @return bool
func (a *DefaultApiService) DetachEntityFromAppointmentExecute(r ApiDetachEntityFromAppointmentRequest) (bool, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  bool
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DetachEntityFromAppointment")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/appointments/appointments/{appointment_uuid}/entities/{entity_uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"appointment_uuid"+"}", url.PathEscape(parameterToString(r.appointmentUuid, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"entity_uuid"+"}", url.PathEscape(parameterToString(r.entityUuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xAccessToken != nil {
		localVarHeaderParams["x-access-token"] = parameterToString(*r.xAccessToken, "")
	}
	if r.xSecretToken != nil {
		localVarHeaderParams["x-secret-token"] = parameterToString(*r.xSecretToken, "")
	}
	if r.authorization != nil {
		localVarHeaderParams["authorization"] = parameterToString(*r.authorization, "")
	}
	if r.ehelplyActiveParticipant != nil {
		localVarHeaderParams["ehelply-active-participant"] = parameterToString(*r.ehelplyActiveParticipant, "")
	}
	if r.ehelplyProject != nil {
		localVarHeaderParams["ehelply-project"] = parameterToString(*r.ehelplyProject, "")
	}
	if r.ehelplyData != nil {
		localVarHeaderParams["ehelply-data"] = parameterToString(*r.ehelplyData, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDetachProductFromCatalogRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	catalogUuid string
	productUuid string
	xAccessToken *string
	xSecretToken *string
	authorization *string
	ehelplyActiveParticipant *string
	ehelplyProject *string
	ehelplyData *string
}

func (r ApiDetachProductFromCatalogRequest) XAccessToken(xAccessToken string) ApiDetachProductFromCatalogRequest {
	r.xAccessToken = &xAccessToken
	return r
}

func (r ApiDetachProductFromCatalogRequest) XSecretToken(xSecretToken string) ApiDetachProductFromCatalogRequest {
	r.xSecretToken = &xSecretToken
	return r
}

func (r ApiDetachProductFromCatalogRequest) Authorization(authorization string) ApiDetachProductFromCatalogRequest {
	r.authorization = &authorization
	return r
}

func (r ApiDetachProductFromCatalogRequest) EhelplyActiveParticipant(ehelplyActiveParticipant string) ApiDetachProductFromCatalogRequest {
	r.ehelplyActiveParticipant = &ehelplyActiveParticipant
	return r
}

func (r ApiDetachProductFromCatalogRequest) EhelplyProject(ehelplyProject string) ApiDetachProductFromCatalogRequest {
	r.ehelplyProject = &ehelplyProject
	return r
}

func (r ApiDetachProductFromCatalogRequest) EhelplyData(ehelplyData string) ApiDetachProductFromCatalogRequest {
	r.ehelplyData = &ehelplyData
	return r
}

func (r ApiDetachProductFromCatalogRequest) Execute() (bool, *http.Response, error) {
	return r.ApiService.DetachProductFromCatalogExecute(r)
}

/*
DetachProductFromCatalog Detach Product From Catalog

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param catalogUuid
 @param productUuid
 @return ApiDetachProductFromCatalogRequest
*/
func (a *DefaultApiService) DetachProductFromCatalog(ctx context.Context, catalogUuid string, productUuid string) ApiDetachProductFromCatalogRequest {
	return ApiDetachProductFromCatalogRequest{
		ApiService: a,
		ctx: ctx,
		catalogUuid: catalogUuid,
		productUuid: productUuid,
	}
}

// Execute executes the request
//  @return bool
func (a *DefaultApiService) DetachProductFromCatalogExecute(r ApiDetachProductFromCatalogRequest) (bool, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  bool
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DetachProductFromCatalog")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/products/catalogs/{catalog_uuid}/products/{product_uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"catalog_uuid"+"}", url.PathEscape(parameterToString(r.catalogUuid, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"product_uuid"+"}", url.PathEscape(parameterToString(r.productUuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xAccessToken != nil {
		localVarHeaderParams["x-access-token"] = parameterToString(*r.xAccessToken, "")
	}
	if r.xSecretToken != nil {
		localVarHeaderParams["x-secret-token"] = parameterToString(*r.xSecretToken, "")
	}
	if r.authorization != nil {
		localVarHeaderParams["authorization"] = parameterToString(*r.authorization, "")
	}
	if r.ehelplyActiveParticipant != nil {
		localVarHeaderParams["ehelply-active-participant"] = parameterToString(*r.ehelplyActiveParticipant, "")
	}
	if r.ehelplyProject != nil {
		localVarHeaderParams["ehelply-project"] = parameterToString(*r.ehelplyProject, "")
	}
	if r.ehelplyData != nil {
		localVarHeaderParams["ehelply-data"] = parameterToString(*r.ehelplyData, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAppointmentRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	appointmentUuid string
	xAccessToken *string
	xSecretToken *string
	authorization *string
	ehelplyActiveParticipant *string
	ehelplyProject *string
	ehelplyData *string
}

func (r ApiGetAppointmentRequest) XAccessToken(xAccessToken string) ApiGetAppointmentRequest {
	r.xAccessToken = &xAccessToken
	return r
}

func (r ApiGetAppointmentRequest) XSecretToken(xSecretToken string) ApiGetAppointmentRequest {
	r.xSecretToken = &xSecretToken
	return r
}

func (r ApiGetAppointmentRequest) Authorization(authorization string) ApiGetAppointmentRequest {
	r.authorization = &authorization
	return r
}

func (r ApiGetAppointmentRequest) EhelplyActiveParticipant(ehelplyActiveParticipant string) ApiGetAppointmentRequest {
	r.ehelplyActiveParticipant = &ehelplyActiveParticipant
	return r
}

func (r ApiGetAppointmentRequest) EhelplyProject(ehelplyProject string) ApiGetAppointmentRequest {
	r.ehelplyProject = &ehelplyProject
	return r
}

func (r ApiGetAppointmentRequest) EhelplyData(ehelplyData string) ApiGetAppointmentRequest {
	r.ehelplyData = &ehelplyData
	return r
}

func (r ApiGetAppointmentRequest) Execute() (*AppointmentResponse, *http.Response, error) {
	return r.ApiService.GetAppointmentExecute(r)
}

/*
GetAppointment Get Appointment

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param appointmentUuid
 @return ApiGetAppointmentRequest
*/
func (a *DefaultApiService) GetAppointment(ctx context.Context, appointmentUuid string) ApiGetAppointmentRequest {
	return ApiGetAppointmentRequest{
		ApiService: a,
		ctx: ctx,
		appointmentUuid: appointmentUuid,
	}
}

// Execute executes the request
//  @return AppointmentResponse
func (a *DefaultApiService) GetAppointmentExecute(r ApiGetAppointmentRequest) (*AppointmentResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppointmentResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.GetAppointment")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/appointments/appointments/{appointment_uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"appointment_uuid"+"}", url.PathEscape(parameterToString(r.appointmentUuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xAccessToken != nil {
		localVarHeaderParams["x-access-token"] = parameterToString(*r.xAccessToken, "")
	}
	if r.xSecretToken != nil {
		localVarHeaderParams["x-secret-token"] = parameterToString(*r.xSecretToken, "")
	}
	if r.authorization != nil {
		localVarHeaderParams["authorization"] = parameterToString(*r.authorization, "")
	}
	if r.ehelplyActiveParticipant != nil {
		localVarHeaderParams["ehelply-active-participant"] = parameterToString(*r.ehelplyActiveParticipant, "")
	}
	if r.ehelplyProject != nil {
		localVarHeaderParams["ehelply-project"] = parameterToString(*r.ehelplyProject, "")
	}
	if r.ehelplyData != nil {
		localVarHeaderParams["ehelply-data"] = parameterToString(*r.ehelplyData, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCatalogRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	catalogUuid string
	withMeta *bool
	xAccessToken *string
	xSecretToken *string
	authorization *string
	ehelplyActiveParticipant *string
	ehelplyProject *string
	ehelplyData *string
}

func (r ApiGetCatalogRequest) WithMeta(withMeta bool) ApiGetCatalogRequest {
	r.withMeta = &withMeta
	return r
}

func (r ApiGetCatalogRequest) XAccessToken(xAccessToken string) ApiGetCatalogRequest {
	r.xAccessToken = &xAccessToken
	return r
}

func (r ApiGetCatalogRequest) XSecretToken(xSecretToken string) ApiGetCatalogRequest {
	r.xSecretToken = &xSecretToken
	return r
}

func (r ApiGetCatalogRequest) Authorization(authorization string) ApiGetCatalogRequest {
	r.authorization = &authorization
	return r
}

func (r ApiGetCatalogRequest) EhelplyActiveParticipant(ehelplyActiveParticipant string) ApiGetCatalogRequest {
	r.ehelplyActiveParticipant = &ehelplyActiveParticipant
	return r
}

func (r ApiGetCatalogRequest) EhelplyProject(ehelplyProject string) ApiGetCatalogRequest {
	r.ehelplyProject = &ehelplyProject
	return r
}

func (r ApiGetCatalogRequest) EhelplyData(ehelplyData string) ApiGetCatalogRequest {
	r.ehelplyData = &ehelplyData
	return r
}

func (r ApiGetCatalogRequest) Execute() (*CatalogReturn, *http.Response, error) {
	return r.ApiService.GetCatalogExecute(r)
}

/*
GetCatalog Get Catalog

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param catalogUuid
 @return ApiGetCatalogRequest
*/
func (a *DefaultApiService) GetCatalog(ctx context.Context, catalogUuid string) ApiGetCatalogRequest {
	return ApiGetCatalogRequest{
		ApiService: a,
		ctx: ctx,
		catalogUuid: catalogUuid,
	}
}

// Execute executes the request
//  @return CatalogReturn
func (a *DefaultApiService) GetCatalogExecute(r ApiGetCatalogRequest) (*CatalogReturn, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CatalogReturn
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.GetCatalog")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/products/catalogs/{catalog_uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"catalog_uuid"+"}", url.PathEscape(parameterToString(r.catalogUuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.withMeta != nil {
		localVarQueryParams.Add("with_meta", parameterToString(*r.withMeta, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xAccessToken != nil {
		localVarHeaderParams["x-access-token"] = parameterToString(*r.xAccessToken, "")
	}
	if r.xSecretToken != nil {
		localVarHeaderParams["x-secret-token"] = parameterToString(*r.xSecretToken, "")
	}
	if r.authorization != nil {
		localVarHeaderParams["authorization"] = parameterToString(*r.authorization, "")
	}
	if r.ehelplyActiveParticipant != nil {
		localVarHeaderParams["ehelply-active-participant"] = parameterToString(*r.ehelplyActiveParticipant, "")
	}
	if r.ehelplyProject != nil {
		localVarHeaderParams["ehelply-project"] = parameterToString(*r.ehelplyProject, "")
	}
	if r.ehelplyData != nil {
		localVarHeaderParams["ehelply-data"] = parameterToString(*r.ehelplyData, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProductRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	productUuid string
	withAddons *bool
	withMeta *bool
	xAccessToken *string
	xSecretToken *string
	authorization *string
	ehelplyActiveParticipant *string
	ehelplyProject *string
	ehelplyData *string
}

func (r ApiGetProductRequest) WithAddons(withAddons bool) ApiGetProductRequest {
	r.withAddons = &withAddons
	return r
}

func (r ApiGetProductRequest) WithMeta(withMeta bool) ApiGetProductRequest {
	r.withMeta = &withMeta
	return r
}

func (r ApiGetProductRequest) XAccessToken(xAccessToken string) ApiGetProductRequest {
	r.xAccessToken = &xAccessToken
	return r
}

func (r ApiGetProductRequest) XSecretToken(xSecretToken string) ApiGetProductRequest {
	r.xSecretToken = &xSecretToken
	return r
}

func (r ApiGetProductRequest) Authorization(authorization string) ApiGetProductRequest {
	r.authorization = &authorization
	return r
}

func (r ApiGetProductRequest) EhelplyActiveParticipant(ehelplyActiveParticipant string) ApiGetProductRequest {
	r.ehelplyActiveParticipant = &ehelplyActiveParticipant
	return r
}

func (r ApiGetProductRequest) EhelplyProject(ehelplyProject string) ApiGetProductRequest {
	r.ehelplyProject = &ehelplyProject
	return r
}

func (r ApiGetProductRequest) EhelplyData(ehelplyData string) ApiGetProductRequest {
	r.ehelplyData = &ehelplyData
	return r
}

func (r ApiGetProductRequest) Execute() (*ProductReturn, *http.Response, error) {
	return r.ApiService.GetProductExecute(r)
}

/*
GetProduct Get Product

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param productUuid
 @return ApiGetProductRequest
*/
func (a *DefaultApiService) GetProduct(ctx context.Context, productUuid string) ApiGetProductRequest {
	return ApiGetProductRequest{
		ApiService: a,
		ctx: ctx,
		productUuid: productUuid,
	}
}

// Execute executes the request
//  @return ProductReturn
func (a *DefaultApiService) GetProductExecute(r ApiGetProductRequest) (*ProductReturn, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProductReturn
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.GetProduct")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/products/products/{product_uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"product_uuid"+"}", url.PathEscape(parameterToString(r.productUuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.withAddons != nil {
		localVarQueryParams.Add("with_addons", parameterToString(*r.withAddons, ""))
	}
	if r.withMeta != nil {
		localVarQueryParams.Add("with_meta", parameterToString(*r.withMeta, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xAccessToken != nil {
		localVarHeaderParams["x-access-token"] = parameterToString(*r.xAccessToken, "")
	}
	if r.xSecretToken != nil {
		localVarHeaderParams["x-secret-token"] = parameterToString(*r.xSecretToken, "")
	}
	if r.authorization != nil {
		localVarHeaderParams["authorization"] = parameterToString(*r.authorization, "")
	}
	if r.ehelplyActiveParticipant != nil {
		localVarHeaderParams["ehelply-active-participant"] = parameterToString(*r.ehelplyActiveParticipant, "")
	}
	if r.ehelplyProject != nil {
		localVarHeaderParams["ehelply-project"] = parameterToString(*r.ehelplyProject, "")
	}
	if r.ehelplyData != nil {
		localVarHeaderParams["ehelply-data"] = parameterToString(*r.ehelplyData, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetReviewRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	entityType string
	entityUuid string
	reviewUuid string
	xAccessToken *string
	xSecretToken *string
	authorization *string
	ehelplyActiveParticipant *string
	ehelplyProject *string
	ehelplyData *string
}

func (r ApiGetReviewRequest) XAccessToken(xAccessToken string) ApiGetReviewRequest {
	r.xAccessToken = &xAccessToken
	return r
}

func (r ApiGetReviewRequest) XSecretToken(xSecretToken string) ApiGetReviewRequest {
	r.xSecretToken = &xSecretToken
	return r
}

func (r ApiGetReviewRequest) Authorization(authorization string) ApiGetReviewRequest {
	r.authorization = &authorization
	return r
}

func (r ApiGetReviewRequest) EhelplyActiveParticipant(ehelplyActiveParticipant string) ApiGetReviewRequest {
	r.ehelplyActiveParticipant = &ehelplyActiveParticipant
	return r
}

func (r ApiGetReviewRequest) EhelplyProject(ehelplyProject string) ApiGetReviewRequest {
	r.ehelplyProject = &ehelplyProject
	return r
}

func (r ApiGetReviewRequest) EhelplyData(ehelplyData string) ApiGetReviewRequest {
	r.ehelplyData = &ehelplyData
	return r
}

func (r ApiGetReviewRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.GetReviewExecute(r)
}

/*
GetReview Get Review

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param entityType
 @param entityUuid
 @param reviewUuid
 @return ApiGetReviewRequest
*/
func (a *DefaultApiService) GetReview(ctx context.Context, entityType string, entityUuid string, reviewUuid string) ApiGetReviewRequest {
	return ApiGetReviewRequest{
		ApiService: a,
		ctx: ctx,
		entityType: entityType,
		entityUuid: entityUuid,
		reviewUuid: reviewUuid,
	}
}

// Execute executes the request
//  @return interface{}
func (a *DefaultApiService) GetReviewExecute(r ApiGetReviewRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.GetReview")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/products/reviews/types/{entity_type}/entities/{entity_uuid}/reviews/{review_uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"entity_type"+"}", url.PathEscape(parameterToString(r.entityType, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"entity_uuid"+"}", url.PathEscape(parameterToString(r.entityUuid, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"review_uuid"+"}", url.PathEscape(parameterToString(r.reviewUuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xAccessToken != nil {
		localVarHeaderParams["x-access-token"] = parameterToString(*r.xAccessToken, "")
	}
	if r.xSecretToken != nil {
		localVarHeaderParams["x-secret-token"] = parameterToString(*r.xSecretToken, "")
	}
	if r.authorization != nil {
		localVarHeaderParams["authorization"] = parameterToString(*r.authorization, "")
	}
	if r.ehelplyActiveParticipant != nil {
		localVarHeaderParams["ehelply-active-participant"] = parameterToString(*r.ehelplyActiveParticipant, "")
	}
	if r.ehelplyProject != nil {
		localVarHeaderParams["ehelply-project"] = parameterToString(*r.ehelplyProject, "")
	}
	if r.ehelplyData != nil {
		localVarHeaderParams["ehelply-data"] = parameterToString(*r.ehelplyData, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchAppointmentRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	placeUuid *string
	excludeCancelled *bool
	isDeleted *bool
	startRange *string
	endRange *string
	page *int32
	pageSize *int32
	sortOn *string
	sortDesc *bool
	search *string
	searchOn *string
	xAccessToken *string
	xSecretToken *string
	authorization *string
	ehelplyActiveParticipant *string
	ehelplyProject *string
	ehelplyData *string
}

func (r ApiSearchAppointmentRequest) PlaceUuid(placeUuid string) ApiSearchAppointmentRequest {
	r.placeUuid = &placeUuid
	return r
}

func (r ApiSearchAppointmentRequest) ExcludeCancelled(excludeCancelled bool) ApiSearchAppointmentRequest {
	r.excludeCancelled = &excludeCancelled
	return r
}

func (r ApiSearchAppointmentRequest) IsDeleted(isDeleted bool) ApiSearchAppointmentRequest {
	r.isDeleted = &isDeleted
	return r
}

func (r ApiSearchAppointmentRequest) StartRange(startRange string) ApiSearchAppointmentRequest {
	r.startRange = &startRange
	return r
}

func (r ApiSearchAppointmentRequest) EndRange(endRange string) ApiSearchAppointmentRequest {
	r.endRange = &endRange
	return r
}

func (r ApiSearchAppointmentRequest) Page(page int32) ApiSearchAppointmentRequest {
	r.page = &page
	return r
}

func (r ApiSearchAppointmentRequest) PageSize(pageSize int32) ApiSearchAppointmentRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiSearchAppointmentRequest) SortOn(sortOn string) ApiSearchAppointmentRequest {
	r.sortOn = &sortOn
	return r
}

func (r ApiSearchAppointmentRequest) SortDesc(sortDesc bool) ApiSearchAppointmentRequest {
	r.sortDesc = &sortDesc
	return r
}

func (r ApiSearchAppointmentRequest) Search(search string) ApiSearchAppointmentRequest {
	r.search = &search
	return r
}

func (r ApiSearchAppointmentRequest) SearchOn(searchOn string) ApiSearchAppointmentRequest {
	r.searchOn = &searchOn
	return r
}

func (r ApiSearchAppointmentRequest) XAccessToken(xAccessToken string) ApiSearchAppointmentRequest {
	r.xAccessToken = &xAccessToken
	return r
}

func (r ApiSearchAppointmentRequest) XSecretToken(xSecretToken string) ApiSearchAppointmentRequest {
	r.xSecretToken = &xSecretToken
	return r
}

func (r ApiSearchAppointmentRequest) Authorization(authorization string) ApiSearchAppointmentRequest {
	r.authorization = &authorization
	return r
}

func (r ApiSearchAppointmentRequest) EhelplyActiveParticipant(ehelplyActiveParticipant string) ApiSearchAppointmentRequest {
	r.ehelplyActiveParticipant = &ehelplyActiveParticipant
	return r
}

func (r ApiSearchAppointmentRequest) EhelplyProject(ehelplyProject string) ApiSearchAppointmentRequest {
	r.ehelplyProject = &ehelplyProject
	return r
}

func (r ApiSearchAppointmentRequest) EhelplyData(ehelplyData string) ApiSearchAppointmentRequest {
	r.ehelplyData = &ehelplyData
	return r
}

func (r ApiSearchAppointmentRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.SearchAppointmentExecute(r)
}

/*
SearchAppointment Search Appointment

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSearchAppointmentRequest
*/
func (a *DefaultApiService) SearchAppointment(ctx context.Context) ApiSearchAppointmentRequest {
	return ApiSearchAppointmentRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return interface{}
func (a *DefaultApiService) SearchAppointmentExecute(r ApiSearchAppointmentRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.SearchAppointment")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/appointments/appointments"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.placeUuid != nil {
		localVarQueryParams.Add("place_uuid", parameterToString(*r.placeUuid, ""))
	}
	if r.excludeCancelled != nil {
		localVarQueryParams.Add("exclude_cancelled", parameterToString(*r.excludeCancelled, ""))
	}
	if r.isDeleted != nil {
		localVarQueryParams.Add("is_deleted", parameterToString(*r.isDeleted, ""))
	}
	if r.startRange != nil {
		localVarQueryParams.Add("start_range", parameterToString(*r.startRange, ""))
	}
	if r.endRange != nil {
		localVarQueryParams.Add("end_range", parameterToString(*r.endRange, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("page_size", parameterToString(*r.pageSize, ""))
	}
	if r.sortOn != nil {
		localVarQueryParams.Add("sort_on", parameterToString(*r.sortOn, ""))
	}
	if r.sortDesc != nil {
		localVarQueryParams.Add("sort_desc", parameterToString(*r.sortDesc, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("search", parameterToString(*r.search, ""))
	}
	if r.searchOn != nil {
		localVarQueryParams.Add("search_on", parameterToString(*r.searchOn, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xAccessToken != nil {
		localVarHeaderParams["x-access-token"] = parameterToString(*r.xAccessToken, "")
	}
	if r.xSecretToken != nil {
		localVarHeaderParams["x-secret-token"] = parameterToString(*r.xSecretToken, "")
	}
	if r.authorization != nil {
		localVarHeaderParams["authorization"] = parameterToString(*r.authorization, "")
	}
	if r.ehelplyActiveParticipant != nil {
		localVarHeaderParams["ehelply-active-participant"] = parameterToString(*r.ehelplyActiveParticipant, "")
	}
	if r.ehelplyProject != nil {
		localVarHeaderParams["ehelply-project"] = parameterToString(*r.ehelplyProject, "")
	}
	if r.ehelplyData != nil {
		localVarHeaderParams["ehelply-data"] = parameterToString(*r.ehelplyData, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchAppointmentEntitiesRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	appointmentUuid string
	page *int32
	pageSize *int32
	sortOn *string
	sortDesc *bool
	search *string
	searchOn *string
	xAccessToken *string
	xSecretToken *string
	authorization *string
	ehelplyActiveParticipant *string
	ehelplyProject *string
	ehelplyData *string
}

func (r ApiSearchAppointmentEntitiesRequest) Page(page int32) ApiSearchAppointmentEntitiesRequest {
	r.page = &page
	return r
}

func (r ApiSearchAppointmentEntitiesRequest) PageSize(pageSize int32) ApiSearchAppointmentEntitiesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiSearchAppointmentEntitiesRequest) SortOn(sortOn string) ApiSearchAppointmentEntitiesRequest {
	r.sortOn = &sortOn
	return r
}

func (r ApiSearchAppointmentEntitiesRequest) SortDesc(sortDesc bool) ApiSearchAppointmentEntitiesRequest {
	r.sortDesc = &sortDesc
	return r
}

func (r ApiSearchAppointmentEntitiesRequest) Search(search string) ApiSearchAppointmentEntitiesRequest {
	r.search = &search
	return r
}

func (r ApiSearchAppointmentEntitiesRequest) SearchOn(searchOn string) ApiSearchAppointmentEntitiesRequest {
	r.searchOn = &searchOn
	return r
}

func (r ApiSearchAppointmentEntitiesRequest) XAccessToken(xAccessToken string) ApiSearchAppointmentEntitiesRequest {
	r.xAccessToken = &xAccessToken
	return r
}

func (r ApiSearchAppointmentEntitiesRequest) XSecretToken(xSecretToken string) ApiSearchAppointmentEntitiesRequest {
	r.xSecretToken = &xSecretToken
	return r
}

func (r ApiSearchAppointmentEntitiesRequest) Authorization(authorization string) ApiSearchAppointmentEntitiesRequest {
	r.authorization = &authorization
	return r
}

func (r ApiSearchAppointmentEntitiesRequest) EhelplyActiveParticipant(ehelplyActiveParticipant string) ApiSearchAppointmentEntitiesRequest {
	r.ehelplyActiveParticipant = &ehelplyActiveParticipant
	return r
}

func (r ApiSearchAppointmentEntitiesRequest) EhelplyProject(ehelplyProject string) ApiSearchAppointmentEntitiesRequest {
	r.ehelplyProject = &ehelplyProject
	return r
}

func (r ApiSearchAppointmentEntitiesRequest) EhelplyData(ehelplyData string) ApiSearchAppointmentEntitiesRequest {
	r.ehelplyData = &ehelplyData
	return r
}

func (r ApiSearchAppointmentEntitiesRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.SearchAppointmentEntitiesExecute(r)
}

/*
SearchAppointmentEntities Search Appointment Entities

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param appointmentUuid
 @return ApiSearchAppointmentEntitiesRequest
*/
func (a *DefaultApiService) SearchAppointmentEntities(ctx context.Context, appointmentUuid string) ApiSearchAppointmentEntitiesRequest {
	return ApiSearchAppointmentEntitiesRequest{
		ApiService: a,
		ctx: ctx,
		appointmentUuid: appointmentUuid,
	}
}

// Execute executes the request
//  @return interface{}
func (a *DefaultApiService) SearchAppointmentEntitiesExecute(r ApiSearchAppointmentEntitiesRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.SearchAppointmentEntities")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/appointments/appointments/{appointment_uuid}/entities"
	localVarPath = strings.Replace(localVarPath, "{"+"appointment_uuid"+"}", url.PathEscape(parameterToString(r.appointmentUuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("page_size", parameterToString(*r.pageSize, ""))
	}
	if r.sortOn != nil {
		localVarQueryParams.Add("sort_on", parameterToString(*r.sortOn, ""))
	}
	if r.sortDesc != nil {
		localVarQueryParams.Add("sort_desc", parameterToString(*r.sortDesc, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("search", parameterToString(*r.search, ""))
	}
	if r.searchOn != nil {
		localVarQueryParams.Add("search_on", parameterToString(*r.searchOn, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xAccessToken != nil {
		localVarHeaderParams["x-access-token"] = parameterToString(*r.xAccessToken, "")
	}
	if r.xSecretToken != nil {
		localVarHeaderParams["x-secret-token"] = parameterToString(*r.xSecretToken, "")
	}
	if r.authorization != nil {
		localVarHeaderParams["authorization"] = parameterToString(*r.authorization, "")
	}
	if r.ehelplyActiveParticipant != nil {
		localVarHeaderParams["ehelply-active-participant"] = parameterToString(*r.ehelplyActiveParticipant, "")
	}
	if r.ehelplyProject != nil {
		localVarHeaderParams["ehelply-project"] = parameterToString(*r.ehelplyProject, "")
	}
	if r.ehelplyData != nil {
		localVarHeaderParams["ehelply-data"] = parameterToString(*r.ehelplyData, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchCatalogProductsRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	catalogUuid string
	withMeta *bool
	page *int32
	pageSize *int32
	sortOn *string
	sortDesc *bool
	xAccessToken *string
	xSecretToken *string
	authorization *string
	ehelplyActiveParticipant *string
	ehelplyProject *string
	ehelplyData *string
}

func (r ApiSearchCatalogProductsRequest) WithMeta(withMeta bool) ApiSearchCatalogProductsRequest {
	r.withMeta = &withMeta
	return r
}

func (r ApiSearchCatalogProductsRequest) Page(page int32) ApiSearchCatalogProductsRequest {
	r.page = &page
	return r
}

func (r ApiSearchCatalogProductsRequest) PageSize(pageSize int32) ApiSearchCatalogProductsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiSearchCatalogProductsRequest) SortOn(sortOn string) ApiSearchCatalogProductsRequest {
	r.sortOn = &sortOn
	return r
}

func (r ApiSearchCatalogProductsRequest) SortDesc(sortDesc bool) ApiSearchCatalogProductsRequest {
	r.sortDesc = &sortDesc
	return r
}

func (r ApiSearchCatalogProductsRequest) XAccessToken(xAccessToken string) ApiSearchCatalogProductsRequest {
	r.xAccessToken = &xAccessToken
	return r
}

func (r ApiSearchCatalogProductsRequest) XSecretToken(xSecretToken string) ApiSearchCatalogProductsRequest {
	r.xSecretToken = &xSecretToken
	return r
}

func (r ApiSearchCatalogProductsRequest) Authorization(authorization string) ApiSearchCatalogProductsRequest {
	r.authorization = &authorization
	return r
}

func (r ApiSearchCatalogProductsRequest) EhelplyActiveParticipant(ehelplyActiveParticipant string) ApiSearchCatalogProductsRequest {
	r.ehelplyActiveParticipant = &ehelplyActiveParticipant
	return r
}

func (r ApiSearchCatalogProductsRequest) EhelplyProject(ehelplyProject string) ApiSearchCatalogProductsRequest {
	r.ehelplyProject = &ehelplyProject
	return r
}

func (r ApiSearchCatalogProductsRequest) EhelplyData(ehelplyData string) ApiSearchCatalogProductsRequest {
	r.ehelplyData = &ehelplyData
	return r
}

func (r ApiSearchCatalogProductsRequest) Execute() (*Page, *http.Response, error) {
	return r.ApiService.SearchCatalogProductsExecute(r)
}

/*
SearchCatalogProducts Search Catalog Products

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param catalogUuid
 @return ApiSearchCatalogProductsRequest
*/
func (a *DefaultApiService) SearchCatalogProducts(ctx context.Context, catalogUuid string) ApiSearchCatalogProductsRequest {
	return ApiSearchCatalogProductsRequest{
		ApiService: a,
		ctx: ctx,
		catalogUuid: catalogUuid,
	}
}

// Execute executes the request
//  @return Page
func (a *DefaultApiService) SearchCatalogProductsExecute(r ApiSearchCatalogProductsRequest) (*Page, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Page
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.SearchCatalogProducts")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/products/catalogs/{catalog_uuid}/products"
	localVarPath = strings.Replace(localVarPath, "{"+"catalog_uuid"+"}", url.PathEscape(parameterToString(r.catalogUuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.withMeta != nil {
		localVarQueryParams.Add("with_meta", parameterToString(*r.withMeta, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("page_size", parameterToString(*r.pageSize, ""))
	}
	if r.sortOn != nil {
		localVarQueryParams.Add("sort_on", parameterToString(*r.sortOn, ""))
	}
	if r.sortDesc != nil {
		localVarQueryParams.Add("sort_desc", parameterToString(*r.sortDesc, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xAccessToken != nil {
		localVarHeaderParams["x-access-token"] = parameterToString(*r.xAccessToken, "")
	}
	if r.xSecretToken != nil {
		localVarHeaderParams["x-secret-token"] = parameterToString(*r.xSecretToken, "")
	}
	if r.authorization != nil {
		localVarHeaderParams["authorization"] = parameterToString(*r.authorization, "")
	}
	if r.ehelplyActiveParticipant != nil {
		localVarHeaderParams["ehelply-active-participant"] = parameterToString(*r.ehelplyActiveParticipant, "")
	}
	if r.ehelplyProject != nil {
		localVarHeaderParams["ehelply-project"] = parameterToString(*r.ehelplyProject, "")
	}
	if r.ehelplyData != nil {
		localVarHeaderParams["ehelply-data"] = parameterToString(*r.ehelplyData, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchCatalogsRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	withMeta *bool
	name *string
	page *int32
	pageSize *int32
	sortOn *string
	sortDesc *bool
	xAccessToken *string
	xSecretToken *string
	authorization *string
	ehelplyActiveParticipant *string
	ehelplyProject *string
	ehelplyData *string
}

func (r ApiSearchCatalogsRequest) WithMeta(withMeta bool) ApiSearchCatalogsRequest {
	r.withMeta = &withMeta
	return r
}

func (r ApiSearchCatalogsRequest) Name(name string) ApiSearchCatalogsRequest {
	r.name = &name
	return r
}

func (r ApiSearchCatalogsRequest) Page(page int32) ApiSearchCatalogsRequest {
	r.page = &page
	return r
}

func (r ApiSearchCatalogsRequest) PageSize(pageSize int32) ApiSearchCatalogsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiSearchCatalogsRequest) SortOn(sortOn string) ApiSearchCatalogsRequest {
	r.sortOn = &sortOn
	return r
}

func (r ApiSearchCatalogsRequest) SortDesc(sortDesc bool) ApiSearchCatalogsRequest {
	r.sortDesc = &sortDesc
	return r
}

func (r ApiSearchCatalogsRequest) XAccessToken(xAccessToken string) ApiSearchCatalogsRequest {
	r.xAccessToken = &xAccessToken
	return r
}

func (r ApiSearchCatalogsRequest) XSecretToken(xSecretToken string) ApiSearchCatalogsRequest {
	r.xSecretToken = &xSecretToken
	return r
}

func (r ApiSearchCatalogsRequest) Authorization(authorization string) ApiSearchCatalogsRequest {
	r.authorization = &authorization
	return r
}

func (r ApiSearchCatalogsRequest) EhelplyActiveParticipant(ehelplyActiveParticipant string) ApiSearchCatalogsRequest {
	r.ehelplyActiveParticipant = &ehelplyActiveParticipant
	return r
}

func (r ApiSearchCatalogsRequest) EhelplyProject(ehelplyProject string) ApiSearchCatalogsRequest {
	r.ehelplyProject = &ehelplyProject
	return r
}

func (r ApiSearchCatalogsRequest) EhelplyData(ehelplyData string) ApiSearchCatalogsRequest {
	r.ehelplyData = &ehelplyData
	return r
}

func (r ApiSearchCatalogsRequest) Execute() (*Page, *http.Response, error) {
	return r.ApiService.SearchCatalogsExecute(r)
}

/*
SearchCatalogs Search Catalogs

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSearchCatalogsRequest
*/
func (a *DefaultApiService) SearchCatalogs(ctx context.Context) ApiSearchCatalogsRequest {
	return ApiSearchCatalogsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Page
func (a *DefaultApiService) SearchCatalogsExecute(r ApiSearchCatalogsRequest) (*Page, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Page
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.SearchCatalogs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/products/catalogs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.withMeta != nil {
		localVarQueryParams.Add("with_meta", parameterToString(*r.withMeta, ""))
	}
	if r.name != nil {
		localVarQueryParams.Add("name", parameterToString(*r.name, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("page_size", parameterToString(*r.pageSize, ""))
	}
	if r.sortOn != nil {
		localVarQueryParams.Add("sort_on", parameterToString(*r.sortOn, ""))
	}
	if r.sortDesc != nil {
		localVarQueryParams.Add("sort_desc", parameterToString(*r.sortDesc, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xAccessToken != nil {
		localVarHeaderParams["x-access-token"] = parameterToString(*r.xAccessToken, "")
	}
	if r.xSecretToken != nil {
		localVarHeaderParams["x-secret-token"] = parameterToString(*r.xSecretToken, "")
	}
	if r.authorization != nil {
		localVarHeaderParams["authorization"] = parameterToString(*r.authorization, "")
	}
	if r.ehelplyActiveParticipant != nil {
		localVarHeaderParams["ehelply-active-participant"] = parameterToString(*r.ehelplyActiveParticipant, "")
	}
	if r.ehelplyProject != nil {
		localVarHeaderParams["ehelply-project"] = parameterToString(*r.ehelplyProject, "")
	}
	if r.ehelplyData != nil {
		localVarHeaderParams["ehelply-data"] = parameterToString(*r.ehelplyData, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchEntityAppointmentsRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	entityUuid string
	startDate *string
	endDate *string
	includeCancelled *bool
	xAccessToken *string
	xSecretToken *string
	authorization *string
	ehelplyActiveParticipant *string
	ehelplyProject *string
	ehelplyData *string
}

func (r ApiSearchEntityAppointmentsRequest) StartDate(startDate string) ApiSearchEntityAppointmentsRequest {
	r.startDate = &startDate
	return r
}

func (r ApiSearchEntityAppointmentsRequest) EndDate(endDate string) ApiSearchEntityAppointmentsRequest {
	r.endDate = &endDate
	return r
}

func (r ApiSearchEntityAppointmentsRequest) IncludeCancelled(includeCancelled bool) ApiSearchEntityAppointmentsRequest {
	r.includeCancelled = &includeCancelled
	return r
}

func (r ApiSearchEntityAppointmentsRequest) XAccessToken(xAccessToken string) ApiSearchEntityAppointmentsRequest {
	r.xAccessToken = &xAccessToken
	return r
}

func (r ApiSearchEntityAppointmentsRequest) XSecretToken(xSecretToken string) ApiSearchEntityAppointmentsRequest {
	r.xSecretToken = &xSecretToken
	return r
}

func (r ApiSearchEntityAppointmentsRequest) Authorization(authorization string) ApiSearchEntityAppointmentsRequest {
	r.authorization = &authorization
	return r
}

func (r ApiSearchEntityAppointmentsRequest) EhelplyActiveParticipant(ehelplyActiveParticipant string) ApiSearchEntityAppointmentsRequest {
	r.ehelplyActiveParticipant = &ehelplyActiveParticipant
	return r
}

func (r ApiSearchEntityAppointmentsRequest) EhelplyProject(ehelplyProject string) ApiSearchEntityAppointmentsRequest {
	r.ehelplyProject = &ehelplyProject
	return r
}

func (r ApiSearchEntityAppointmentsRequest) EhelplyData(ehelplyData string) ApiSearchEntityAppointmentsRequest {
	r.ehelplyData = &ehelplyData
	return r
}

func (r ApiSearchEntityAppointmentsRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.SearchEntityAppointmentsExecute(r)
}

/*
SearchEntityAppointments Get Entities Appointments

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param entityUuid
 @return ApiSearchEntityAppointmentsRequest
*/
func (a *DefaultApiService) SearchEntityAppointments(ctx context.Context, entityUuid string) ApiSearchEntityAppointmentsRequest {
	return ApiSearchEntityAppointmentsRequest{
		ApiService: a,
		ctx: ctx,
		entityUuid: entityUuid,
	}
}

// Execute executes the request
//  @return interface{}
func (a *DefaultApiService) SearchEntityAppointmentsExecute(r ApiSearchEntityAppointmentsRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.SearchEntityAppointments")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/appointments/appointments/entities/{entity_uuid}/appointments"
	localVarPath = strings.Replace(localVarPath, "{"+"entity_uuid"+"}", url.PathEscape(parameterToString(r.entityUuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startDate != nil {
		localVarQueryParams.Add("start_date", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("end_date", parameterToString(*r.endDate, ""))
	}
	if r.includeCancelled != nil {
		localVarQueryParams.Add("include_cancelled", parameterToString(*r.includeCancelled, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xAccessToken != nil {
		localVarHeaderParams["x-access-token"] = parameterToString(*r.xAccessToken, "")
	}
	if r.xSecretToken != nil {
		localVarHeaderParams["x-secret-token"] = parameterToString(*r.xSecretToken, "")
	}
	if r.authorization != nil {
		localVarHeaderParams["authorization"] = parameterToString(*r.authorization, "")
	}
	if r.ehelplyActiveParticipant != nil {
		localVarHeaderParams["ehelply-active-participant"] = parameterToString(*r.ehelplyActiveParticipant, "")
	}
	if r.ehelplyProject != nil {
		localVarHeaderParams["ehelply-project"] = parameterToString(*r.ehelplyProject, "")
	}
	if r.ehelplyData != nil {
		localVarHeaderParams["ehelply-data"] = parameterToString(*r.ehelplyData, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchProductRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	withMeta *bool
	name *string
	addons *[]string
	priceMax *int32
	priceMin *int32
	quantityAvailable *bool
	isDeleted *bool
	page *int32
	pageSize *int32
	sortOn *string
	sortDesc *bool
	xAccessToken *string
	xSecretToken *string
	authorization *string
	ehelplyActiveParticipant *string
	ehelplyProject *string
	ehelplyData *string
}

func (r ApiSearchProductRequest) WithMeta(withMeta bool) ApiSearchProductRequest {
	r.withMeta = &withMeta
	return r
}

func (r ApiSearchProductRequest) Name(name string) ApiSearchProductRequest {
	r.name = &name
	return r
}

func (r ApiSearchProductRequest) Addons(addons []string) ApiSearchProductRequest {
	r.addons = &addons
	return r
}

func (r ApiSearchProductRequest) PriceMax(priceMax int32) ApiSearchProductRequest {
	r.priceMax = &priceMax
	return r
}

func (r ApiSearchProductRequest) PriceMin(priceMin int32) ApiSearchProductRequest {
	r.priceMin = &priceMin
	return r
}

func (r ApiSearchProductRequest) QuantityAvailable(quantityAvailable bool) ApiSearchProductRequest {
	r.quantityAvailable = &quantityAvailable
	return r
}

func (r ApiSearchProductRequest) IsDeleted(isDeleted bool) ApiSearchProductRequest {
	r.isDeleted = &isDeleted
	return r
}

func (r ApiSearchProductRequest) Page(page int32) ApiSearchProductRequest {
	r.page = &page
	return r
}

func (r ApiSearchProductRequest) PageSize(pageSize int32) ApiSearchProductRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiSearchProductRequest) SortOn(sortOn string) ApiSearchProductRequest {
	r.sortOn = &sortOn
	return r
}

func (r ApiSearchProductRequest) SortDesc(sortDesc bool) ApiSearchProductRequest {
	r.sortDesc = &sortDesc
	return r
}

func (r ApiSearchProductRequest) XAccessToken(xAccessToken string) ApiSearchProductRequest {
	r.xAccessToken = &xAccessToken
	return r
}

func (r ApiSearchProductRequest) XSecretToken(xSecretToken string) ApiSearchProductRequest {
	r.xSecretToken = &xSecretToken
	return r
}

func (r ApiSearchProductRequest) Authorization(authorization string) ApiSearchProductRequest {
	r.authorization = &authorization
	return r
}

func (r ApiSearchProductRequest) EhelplyActiveParticipant(ehelplyActiveParticipant string) ApiSearchProductRequest {
	r.ehelplyActiveParticipant = &ehelplyActiveParticipant
	return r
}

func (r ApiSearchProductRequest) EhelplyProject(ehelplyProject string) ApiSearchProductRequest {
	r.ehelplyProject = &ehelplyProject
	return r
}

func (r ApiSearchProductRequest) EhelplyData(ehelplyData string) ApiSearchProductRequest {
	r.ehelplyData = &ehelplyData
	return r
}

func (r ApiSearchProductRequest) Execute() (*Page, *http.Response, error) {
	return r.ApiService.SearchProductExecute(r)
}

/*
SearchProduct Search Products

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSearchProductRequest
*/
func (a *DefaultApiService) SearchProduct(ctx context.Context) ApiSearchProductRequest {
	return ApiSearchProductRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Page
func (a *DefaultApiService) SearchProductExecute(r ApiSearchProductRequest) (*Page, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Page
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.SearchProduct")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/products/products"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.withMeta != nil {
		localVarQueryParams.Add("with_meta", parameterToString(*r.withMeta, ""))
	}
	if r.name != nil {
		localVarQueryParams.Add("name", parameterToString(*r.name, ""))
	}
	if r.addons != nil {
		t := *r.addons
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("addons", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("addons", parameterToString(t, "multi"))
		}
	}
	if r.priceMax != nil {
		localVarQueryParams.Add("price_max", parameterToString(*r.priceMax, ""))
	}
	if r.priceMin != nil {
		localVarQueryParams.Add("price_min", parameterToString(*r.priceMin, ""))
	}
	if r.quantityAvailable != nil {
		localVarQueryParams.Add("quantity_available", parameterToString(*r.quantityAvailable, ""))
	}
	if r.isDeleted != nil {
		localVarQueryParams.Add("is_deleted", parameterToString(*r.isDeleted, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("page_size", parameterToString(*r.pageSize, ""))
	}
	if r.sortOn != nil {
		localVarQueryParams.Add("sort_on", parameterToString(*r.sortOn, ""))
	}
	if r.sortDesc != nil {
		localVarQueryParams.Add("sort_desc", parameterToString(*r.sortDesc, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xAccessToken != nil {
		localVarHeaderParams["x-access-token"] = parameterToString(*r.xAccessToken, "")
	}
	if r.xSecretToken != nil {
		localVarHeaderParams["x-secret-token"] = parameterToString(*r.xSecretToken, "")
	}
	if r.authorization != nil {
		localVarHeaderParams["authorization"] = parameterToString(*r.authorization, "")
	}
	if r.ehelplyActiveParticipant != nil {
		localVarHeaderParams["ehelply-active-participant"] = parameterToString(*r.ehelplyActiveParticipant, "")
	}
	if r.ehelplyProject != nil {
		localVarHeaderParams["ehelply-project"] = parameterToString(*r.ehelplyProject, "")
	}
	if r.ehelplyData != nil {
		localVarHeaderParams["ehelply-data"] = parameterToString(*r.ehelplyData, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchProductCatalogRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	productUuid string
	withMeta *bool
	page *int32
	pageSize *int32
	sortOn *string
	sortDesc *bool
	xAccessToken *string
	xSecretToken *string
	authorization *string
	ehelplyActiveParticipant *string
	ehelplyProject *string
	ehelplyData *string
}

func (r ApiSearchProductCatalogRequest) WithMeta(withMeta bool) ApiSearchProductCatalogRequest {
	r.withMeta = &withMeta
	return r
}

func (r ApiSearchProductCatalogRequest) Page(page int32) ApiSearchProductCatalogRequest {
	r.page = &page
	return r
}

func (r ApiSearchProductCatalogRequest) PageSize(pageSize int32) ApiSearchProductCatalogRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiSearchProductCatalogRequest) SortOn(sortOn string) ApiSearchProductCatalogRequest {
	r.sortOn = &sortOn
	return r
}

func (r ApiSearchProductCatalogRequest) SortDesc(sortDesc bool) ApiSearchProductCatalogRequest {
	r.sortDesc = &sortDesc
	return r
}

func (r ApiSearchProductCatalogRequest) XAccessToken(xAccessToken string) ApiSearchProductCatalogRequest {
	r.xAccessToken = &xAccessToken
	return r
}

func (r ApiSearchProductCatalogRequest) XSecretToken(xSecretToken string) ApiSearchProductCatalogRequest {
	r.xSecretToken = &xSecretToken
	return r
}

func (r ApiSearchProductCatalogRequest) Authorization(authorization string) ApiSearchProductCatalogRequest {
	r.authorization = &authorization
	return r
}

func (r ApiSearchProductCatalogRequest) EhelplyActiveParticipant(ehelplyActiveParticipant string) ApiSearchProductCatalogRequest {
	r.ehelplyActiveParticipant = &ehelplyActiveParticipant
	return r
}

func (r ApiSearchProductCatalogRequest) EhelplyProject(ehelplyProject string) ApiSearchProductCatalogRequest {
	r.ehelplyProject = &ehelplyProject
	return r
}

func (r ApiSearchProductCatalogRequest) EhelplyData(ehelplyData string) ApiSearchProductCatalogRequest {
	r.ehelplyData = &ehelplyData
	return r
}

func (r ApiSearchProductCatalogRequest) Execute() (*Page, *http.Response, error) {
	return r.ApiService.SearchProductCatalogExecute(r)
}

/*
SearchProductCatalog Search Product Catalogs

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param productUuid
 @return ApiSearchProductCatalogRequest
*/
func (a *DefaultApiService) SearchProductCatalog(ctx context.Context, productUuid string) ApiSearchProductCatalogRequest {
	return ApiSearchProductCatalogRequest{
		ApiService: a,
		ctx: ctx,
		productUuid: productUuid,
	}
}

// Execute executes the request
//  @return Page
func (a *DefaultApiService) SearchProductCatalogExecute(r ApiSearchProductCatalogRequest) (*Page, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Page
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.SearchProductCatalog")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/products/products/{product_uuid}/catalogs"
	localVarPath = strings.Replace(localVarPath, "{"+"product_uuid"+"}", url.PathEscape(parameterToString(r.productUuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.withMeta != nil {
		localVarQueryParams.Add("with_meta", parameterToString(*r.withMeta, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("page_size", parameterToString(*r.pageSize, ""))
	}
	if r.sortOn != nil {
		localVarQueryParams.Add("sort_on", parameterToString(*r.sortOn, ""))
	}
	if r.sortDesc != nil {
		localVarQueryParams.Add("sort_desc", parameterToString(*r.sortDesc, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xAccessToken != nil {
		localVarHeaderParams["x-access-token"] = parameterToString(*r.xAccessToken, "")
	}
	if r.xSecretToken != nil {
		localVarHeaderParams["x-secret-token"] = parameterToString(*r.xSecretToken, "")
	}
	if r.authorization != nil {
		localVarHeaderParams["authorization"] = parameterToString(*r.authorization, "")
	}
	if r.ehelplyActiveParticipant != nil {
		localVarHeaderParams["ehelply-active-participant"] = parameterToString(*r.ehelplyActiveParticipant, "")
	}
	if r.ehelplyProject != nil {
		localVarHeaderParams["ehelply-project"] = parameterToString(*r.ehelplyProject, "")
	}
	if r.ehelplyData != nil {
		localVarHeaderParams["ehelply-data"] = parameterToString(*r.ehelplyData, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchReviewsRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	entityType string
	entityUuid string
	xAccessToken *string
	xSecretToken *string
	authorization *string
	ehelplyActiveParticipant *string
	ehelplyProject *string
	ehelplyData *string
}

func (r ApiSearchReviewsRequest) XAccessToken(xAccessToken string) ApiSearchReviewsRequest {
	r.xAccessToken = &xAccessToken
	return r
}

func (r ApiSearchReviewsRequest) XSecretToken(xSecretToken string) ApiSearchReviewsRequest {
	r.xSecretToken = &xSecretToken
	return r
}

func (r ApiSearchReviewsRequest) Authorization(authorization string) ApiSearchReviewsRequest {
	r.authorization = &authorization
	return r
}

func (r ApiSearchReviewsRequest) EhelplyActiveParticipant(ehelplyActiveParticipant string) ApiSearchReviewsRequest {
	r.ehelplyActiveParticipant = &ehelplyActiveParticipant
	return r
}

func (r ApiSearchReviewsRequest) EhelplyProject(ehelplyProject string) ApiSearchReviewsRequest {
	r.ehelplyProject = &ehelplyProject
	return r
}

func (r ApiSearchReviewsRequest) EhelplyData(ehelplyData string) ApiSearchReviewsRequest {
	r.ehelplyData = &ehelplyData
	return r
}

func (r ApiSearchReviewsRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.SearchReviewsExecute(r)
}

/*
SearchReviews Search Review

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param entityType
 @param entityUuid
 @return ApiSearchReviewsRequest
*/
func (a *DefaultApiService) SearchReviews(ctx context.Context, entityType string, entityUuid string) ApiSearchReviewsRequest {
	return ApiSearchReviewsRequest{
		ApiService: a,
		ctx: ctx,
		entityType: entityType,
		entityUuid: entityUuid,
	}
}

// Execute executes the request
//  @return interface{}
func (a *DefaultApiService) SearchReviewsExecute(r ApiSearchReviewsRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.SearchReviews")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/products/reviews/types/{entity_type}/entities/{entity_uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"entity_type"+"}", url.PathEscape(parameterToString(r.entityType, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"entity_uuid"+"}", url.PathEscape(parameterToString(r.entityUuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xAccessToken != nil {
		localVarHeaderParams["x-access-token"] = parameterToString(*r.xAccessToken, "")
	}
	if r.xSecretToken != nil {
		localVarHeaderParams["x-secret-token"] = parameterToString(*r.xSecretToken, "")
	}
	if r.authorization != nil {
		localVarHeaderParams["authorization"] = parameterToString(*r.authorization, "")
	}
	if r.ehelplyActiveParticipant != nil {
		localVarHeaderParams["ehelply-active-participant"] = parameterToString(*r.ehelplyActiveParticipant, "")
	}
	if r.ehelplyProject != nil {
		localVarHeaderParams["ehelply-project"] = parameterToString(*r.ehelplyProject, "")
	}
	if r.ehelplyData != nil {
		localVarHeaderParams["ehelply-data"] = parameterToString(*r.ehelplyData, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateAppointmentRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	appointmentUuid string
	appointmentBase *AppointmentBase
	xAccessToken *string
	xSecretToken *string
	authorization *string
	ehelplyActiveParticipant *string
	ehelplyProject *string
	ehelplyData *string
}

func (r ApiUpdateAppointmentRequest) AppointmentBase(appointmentBase AppointmentBase) ApiUpdateAppointmentRequest {
	r.appointmentBase = &appointmentBase
	return r
}

func (r ApiUpdateAppointmentRequest) XAccessToken(xAccessToken string) ApiUpdateAppointmentRequest {
	r.xAccessToken = &xAccessToken
	return r
}

func (r ApiUpdateAppointmentRequest) XSecretToken(xSecretToken string) ApiUpdateAppointmentRequest {
	r.xSecretToken = &xSecretToken
	return r
}

func (r ApiUpdateAppointmentRequest) Authorization(authorization string) ApiUpdateAppointmentRequest {
	r.authorization = &authorization
	return r
}

func (r ApiUpdateAppointmentRequest) EhelplyActiveParticipant(ehelplyActiveParticipant string) ApiUpdateAppointmentRequest {
	r.ehelplyActiveParticipant = &ehelplyActiveParticipant
	return r
}

func (r ApiUpdateAppointmentRequest) EhelplyProject(ehelplyProject string) ApiUpdateAppointmentRequest {
	r.ehelplyProject = &ehelplyProject
	return r
}

func (r ApiUpdateAppointmentRequest) EhelplyData(ehelplyData string) ApiUpdateAppointmentRequest {
	r.ehelplyData = &ehelplyData
	return r
}

func (r ApiUpdateAppointmentRequest) Execute() (*AppointmentResponse, *http.Response, error) {
	return r.ApiService.UpdateAppointmentExecute(r)
}

/*
UpdateAppointment Update Appointment

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param appointmentUuid
 @return ApiUpdateAppointmentRequest
*/
func (a *DefaultApiService) UpdateAppointment(ctx context.Context, appointmentUuid string) ApiUpdateAppointmentRequest {
	return ApiUpdateAppointmentRequest{
		ApiService: a,
		ctx: ctx,
		appointmentUuid: appointmentUuid,
	}
}

// Execute executes the request
//  @return AppointmentResponse
func (a *DefaultApiService) UpdateAppointmentExecute(r ApiUpdateAppointmentRequest) (*AppointmentResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppointmentResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.UpdateAppointment")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/appointments/appointments/{appointment_uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"appointment_uuid"+"}", url.PathEscape(parameterToString(r.appointmentUuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.appointmentBase == nil {
		return localVarReturnValue, nil, reportError("appointmentBase is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xAccessToken != nil {
		localVarHeaderParams["x-access-token"] = parameterToString(*r.xAccessToken, "")
	}
	if r.xSecretToken != nil {
		localVarHeaderParams["x-secret-token"] = parameterToString(*r.xSecretToken, "")
	}
	if r.authorization != nil {
		localVarHeaderParams["authorization"] = parameterToString(*r.authorization, "")
	}
	if r.ehelplyActiveParticipant != nil {
		localVarHeaderParams["ehelply-active-participant"] = parameterToString(*r.ehelplyActiveParticipant, "")
	}
	if r.ehelplyProject != nil {
		localVarHeaderParams["ehelply-project"] = parameterToString(*r.ehelplyProject, "")
	}
	if r.ehelplyData != nil {
		localVarHeaderParams["ehelply-data"] = parameterToString(*r.ehelplyData, "")
	}
	// body params
	localVarPostBody = r.appointmentBase
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateCatalogRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	catalogUuid string
	catalogBase *CatalogBase
	xAccessToken *string
	xSecretToken *string
	authorization *string
	ehelplyActiveParticipant *string
	ehelplyProject *string
	ehelplyData *string
}

func (r ApiUpdateCatalogRequest) CatalogBase(catalogBase CatalogBase) ApiUpdateCatalogRequest {
	r.catalogBase = &catalogBase
	return r
}

func (r ApiUpdateCatalogRequest) XAccessToken(xAccessToken string) ApiUpdateCatalogRequest {
	r.xAccessToken = &xAccessToken
	return r
}

func (r ApiUpdateCatalogRequest) XSecretToken(xSecretToken string) ApiUpdateCatalogRequest {
	r.xSecretToken = &xSecretToken
	return r
}

func (r ApiUpdateCatalogRequest) Authorization(authorization string) ApiUpdateCatalogRequest {
	r.authorization = &authorization
	return r
}

func (r ApiUpdateCatalogRequest) EhelplyActiveParticipant(ehelplyActiveParticipant string) ApiUpdateCatalogRequest {
	r.ehelplyActiveParticipant = &ehelplyActiveParticipant
	return r
}

func (r ApiUpdateCatalogRequest) EhelplyProject(ehelplyProject string) ApiUpdateCatalogRequest {
	r.ehelplyProject = &ehelplyProject
	return r
}

func (r ApiUpdateCatalogRequest) EhelplyData(ehelplyData string) ApiUpdateCatalogRequest {
	r.ehelplyData = &ehelplyData
	return r
}

func (r ApiUpdateCatalogRequest) Execute() (*CatalogReturn, *http.Response, error) {
	return r.ApiService.UpdateCatalogExecute(r)
}

/*
UpdateCatalog Update Catalog

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param catalogUuid
 @return ApiUpdateCatalogRequest
*/
func (a *DefaultApiService) UpdateCatalog(ctx context.Context, catalogUuid string) ApiUpdateCatalogRequest {
	return ApiUpdateCatalogRequest{
		ApiService: a,
		ctx: ctx,
		catalogUuid: catalogUuid,
	}
}

// Execute executes the request
//  @return CatalogReturn
func (a *DefaultApiService) UpdateCatalogExecute(r ApiUpdateCatalogRequest) (*CatalogReturn, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CatalogReturn
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.UpdateCatalog")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/products/catalogs/{catalog_uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"catalog_uuid"+"}", url.PathEscape(parameterToString(r.catalogUuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.catalogBase == nil {
		return localVarReturnValue, nil, reportError("catalogBase is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xAccessToken != nil {
		localVarHeaderParams["x-access-token"] = parameterToString(*r.xAccessToken, "")
	}
	if r.xSecretToken != nil {
		localVarHeaderParams["x-secret-token"] = parameterToString(*r.xSecretToken, "")
	}
	if r.authorization != nil {
		localVarHeaderParams["authorization"] = parameterToString(*r.authorization, "")
	}
	if r.ehelplyActiveParticipant != nil {
		localVarHeaderParams["ehelply-active-participant"] = parameterToString(*r.ehelplyActiveParticipant, "")
	}
	if r.ehelplyProject != nil {
		localVarHeaderParams["ehelply-project"] = parameterToString(*r.ehelplyProject, "")
	}
	if r.ehelplyData != nil {
		localVarHeaderParams["ehelply-data"] = parameterToString(*r.ehelplyData, "")
	}
	// body params
	localVarPostBody = r.catalogBase
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateProductRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	productUuid string
	productBase *ProductBase
	xAccessToken *string
	xSecretToken *string
	authorization *string
	ehelplyActiveParticipant *string
	ehelplyProject *string
	ehelplyData *string
}

func (r ApiUpdateProductRequest) ProductBase(productBase ProductBase) ApiUpdateProductRequest {
	r.productBase = &productBase
	return r
}

func (r ApiUpdateProductRequest) XAccessToken(xAccessToken string) ApiUpdateProductRequest {
	r.xAccessToken = &xAccessToken
	return r
}

func (r ApiUpdateProductRequest) XSecretToken(xSecretToken string) ApiUpdateProductRequest {
	r.xSecretToken = &xSecretToken
	return r
}

func (r ApiUpdateProductRequest) Authorization(authorization string) ApiUpdateProductRequest {
	r.authorization = &authorization
	return r
}

func (r ApiUpdateProductRequest) EhelplyActiveParticipant(ehelplyActiveParticipant string) ApiUpdateProductRequest {
	r.ehelplyActiveParticipant = &ehelplyActiveParticipant
	return r
}

func (r ApiUpdateProductRequest) EhelplyProject(ehelplyProject string) ApiUpdateProductRequest {
	r.ehelplyProject = &ehelplyProject
	return r
}

func (r ApiUpdateProductRequest) EhelplyData(ehelplyData string) ApiUpdateProductRequest {
	r.ehelplyData = &ehelplyData
	return r
}

func (r ApiUpdateProductRequest) Execute() (*ProductReturn, *http.Response, error) {
	return r.ApiService.UpdateProductExecute(r)
}

/*
UpdateProduct Update Product

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param productUuid
 @return ApiUpdateProductRequest
*/
func (a *DefaultApiService) UpdateProduct(ctx context.Context, productUuid string) ApiUpdateProductRequest {
	return ApiUpdateProductRequest{
		ApiService: a,
		ctx: ctx,
		productUuid: productUuid,
	}
}

// Execute executes the request
//  @return ProductReturn
func (a *DefaultApiService) UpdateProductExecute(r ApiUpdateProductRequest) (*ProductReturn, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProductReturn
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.UpdateProduct")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/products/products/{product_uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"product_uuid"+"}", url.PathEscape(parameterToString(r.productUuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.productBase == nil {
		return localVarReturnValue, nil, reportError("productBase is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xAccessToken != nil {
		localVarHeaderParams["x-access-token"] = parameterToString(*r.xAccessToken, "")
	}
	if r.xSecretToken != nil {
		localVarHeaderParams["x-secret-token"] = parameterToString(*r.xSecretToken, "")
	}
	if r.authorization != nil {
		localVarHeaderParams["authorization"] = parameterToString(*r.authorization, "")
	}
	if r.ehelplyActiveParticipant != nil {
		localVarHeaderParams["ehelply-active-participant"] = parameterToString(*r.ehelplyActiveParticipant, "")
	}
	if r.ehelplyProject != nil {
		localVarHeaderParams["ehelply-project"] = parameterToString(*r.ehelplyProject, "")
	}
	if r.ehelplyData != nil {
		localVarHeaderParams["ehelply-data"] = parameterToString(*r.ehelplyData, "")
	}
	// body params
	localVarPostBody = r.productBase
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateReviewRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	entityType string
	entityUuid string
	reviewUuid string
	updateReview *UpdateReview
	xAccessToken *string
	xSecretToken *string
	authorization *string
	ehelplyActiveParticipant *string
	ehelplyProject *string
	ehelplyData *string
}

func (r ApiUpdateReviewRequest) UpdateReview(updateReview UpdateReview) ApiUpdateReviewRequest {
	r.updateReview = &updateReview
	return r
}

func (r ApiUpdateReviewRequest) XAccessToken(xAccessToken string) ApiUpdateReviewRequest {
	r.xAccessToken = &xAccessToken
	return r
}

func (r ApiUpdateReviewRequest) XSecretToken(xSecretToken string) ApiUpdateReviewRequest {
	r.xSecretToken = &xSecretToken
	return r
}

func (r ApiUpdateReviewRequest) Authorization(authorization string) ApiUpdateReviewRequest {
	r.authorization = &authorization
	return r
}

func (r ApiUpdateReviewRequest) EhelplyActiveParticipant(ehelplyActiveParticipant string) ApiUpdateReviewRequest {
	r.ehelplyActiveParticipant = &ehelplyActiveParticipant
	return r
}

func (r ApiUpdateReviewRequest) EhelplyProject(ehelplyProject string) ApiUpdateReviewRequest {
	r.ehelplyProject = &ehelplyProject
	return r
}

func (r ApiUpdateReviewRequest) EhelplyData(ehelplyData string) ApiUpdateReviewRequest {
	r.ehelplyData = &ehelplyData
	return r
}

func (r ApiUpdateReviewRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.UpdateReviewExecute(r)
}

/*
UpdateReview Update Review

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param entityType
 @param entityUuid
 @param reviewUuid
 @return ApiUpdateReviewRequest
*/
func (a *DefaultApiService) UpdateReview(ctx context.Context, entityType string, entityUuid string, reviewUuid string) ApiUpdateReviewRequest {
	return ApiUpdateReviewRequest{
		ApiService: a,
		ctx: ctx,
		entityType: entityType,
		entityUuid: entityUuid,
		reviewUuid: reviewUuid,
	}
}

// Execute executes the request
//  @return interface{}
func (a *DefaultApiService) UpdateReviewExecute(r ApiUpdateReviewRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.UpdateReview")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/products/reviews/types/{entity_type}/entities/{entity_uuid}/reviews/{review_uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"entity_type"+"}", url.PathEscape(parameterToString(r.entityType, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"entity_uuid"+"}", url.PathEscape(parameterToString(r.entityUuid, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"review_uuid"+"}", url.PathEscape(parameterToString(r.reviewUuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateReview == nil {
		return localVarReturnValue, nil, reportError("updateReview is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xAccessToken != nil {
		localVarHeaderParams["x-access-token"] = parameterToString(*r.xAccessToken, "")
	}
	if r.xSecretToken != nil {
		localVarHeaderParams["x-secret-token"] = parameterToString(*r.xSecretToken, "")
	}
	if r.authorization != nil {
		localVarHeaderParams["authorization"] = parameterToString(*r.authorization, "")
	}
	if r.ehelplyActiveParticipant != nil {
		localVarHeaderParams["ehelply-active-participant"] = parameterToString(*r.ehelplyActiveParticipant, "")
	}
	if r.ehelplyProject != nil {
		localVarHeaderParams["ehelply-project"] = parameterToString(*r.ehelplyProject, "")
	}
	if r.ehelplyData != nil {
		localVarHeaderParams["ehelply-data"] = parameterToString(*r.ehelplyData, "")
	}
	// body params
	localVarPostBody = r.updateReview
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
