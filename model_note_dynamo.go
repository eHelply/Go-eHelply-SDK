/*
eHelply SDK - 1.1.96

eHelply SDK for SuperStack Services

API version: 1.1.96
Contact: support@ehelply.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ehelply

import (
	"encoding/json"
	"os"
)

// NoteDynamo A note from DynamoDB
type NoteDynamo struct {
	Uuid string `json:"uuid"`
	Content **os.File `json:"content,omitempty"`
	Time string `json:"time"`
	Meta NoteMeta `json:"meta"`
}

// NewNoteDynamo instantiates a new NoteDynamo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNoteDynamo(uuid string, time string, meta NoteMeta) *NoteDynamo {
	this := NoteDynamo{}
	this.Uuid = uuid
	this.Time = time
	this.Meta = meta
	return &this
}

// NewNoteDynamoWithDefaults instantiates a new NoteDynamo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNoteDynamoWithDefaults() *NoteDynamo {
	this := NoteDynamo{}
	return &this
}

// GetUuid returns the Uuid field value
func (o *NoteDynamo) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *NoteDynamo) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *NoteDynamo) SetUuid(v string) {
	o.Uuid = v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *NoteDynamo) GetContent() *os.File {
	if o == nil || o.Content == nil {
		var ret *os.File
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoteDynamo) GetContentOk() (**os.File, bool) {
	if o == nil || o.Content == nil {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *NoteDynamo) HasContent() bool {
	if o != nil && o.Content != nil {
		return true
	}

	return false
}

// SetContent gets a reference to the given *os.File and assigns it to the Content field.
func (o *NoteDynamo) SetContent(v *os.File) {
	o.Content = &v
}

// GetTime returns the Time field value
func (o *NoteDynamo) GetTime() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Time
}

// GetTimeOk returns a tuple with the Time field value
// and a boolean to check if the value has been set.
func (o *NoteDynamo) GetTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Time, true
}

// SetTime sets field value
func (o *NoteDynamo) SetTime(v string) {
	o.Time = v
}

// GetMeta returns the Meta field value
func (o *NoteDynamo) GetMeta() NoteMeta {
	if o == nil {
		var ret NoteMeta
		return ret
	}

	return o.Meta
}

// GetMetaOk returns a tuple with the Meta field value
// and a boolean to check if the value has been set.
func (o *NoteDynamo) GetMetaOk() (*NoteMeta, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Meta, true
}

// SetMeta sets field value
func (o *NoteDynamo) SetMeta(v NoteMeta) {
	o.Meta = v
}

func (o NoteDynamo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["uuid"] = o.Uuid
	}
	if o.Content != nil {
		toSerialize["content"] = o.Content
	}
	if true {
		toSerialize["time"] = o.Time
	}
	if true {
		toSerialize["meta"] = o.Meta
	}
	return json.Marshal(toSerialize)
}

type NullableNoteDynamo struct {
	value *NoteDynamo
	isSet bool
}

func (v NullableNoteDynamo) Get() *NoteDynamo {
	return v.value
}

func (v *NullableNoteDynamo) Set(val *NoteDynamo) {
	v.value = val
	v.isSet = true
}

func (v NullableNoteDynamo) IsSet() bool {
	return v.isSet
}

func (v *NullableNoteDynamo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNoteDynamo(val *NoteDynamo) *NullableNoteDynamo {
	return &NullableNoteDynamo{value: val, isSet: true}
}

func (v NullableNoteDynamo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNoteDynamo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


