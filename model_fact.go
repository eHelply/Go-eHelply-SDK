/*
eHelply SDK - 1.1.116

eHelply SDK for SuperStack Services

API version: 1.1.116
Contact: support@ehelply.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ehelply

import (
	"encoding/json"
)

// Fact struct for Fact
type Fact struct {
	Name string `json:"name"`
	Data map[string]interface{} `json:"data"`
	Public bool `json:"public"`
}

// NewFact instantiates a new Fact object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFact(name string, data map[string]interface{}, public bool) *Fact {
	this := Fact{}
	this.Name = name
	this.Data = data
	this.Public = public
	return &this
}

// NewFactWithDefaults instantiates a new Fact object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFactWithDefaults() *Fact {
	this := Fact{}
	return &this
}

// GetName returns the Name field value
func (o *Fact) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Fact) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Fact) SetName(v string) {
	o.Name = v
}

// GetData returns the Data field value
func (o *Fact) GetData() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *Fact) GetDataOk() (map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *Fact) SetData(v map[string]interface{}) {
	o.Data = v
}

// GetPublic returns the Public field value
func (o *Fact) GetPublic() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Public
}

// GetPublicOk returns a tuple with the Public field value
// and a boolean to check if the value has been set.
func (o *Fact) GetPublicOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Public, true
}

// SetPublic sets field value
func (o *Fact) SetPublic(v bool) {
	o.Public = v
}

func (o Fact) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["data"] = o.Data
	}
	if true {
		toSerialize["public"] = o.Public
	}
	return json.Marshal(toSerialize)
}

type NullableFact struct {
	value *Fact
	isSet bool
}

func (v NullableFact) Get() *Fact {
	return v.value
}

func (v *NullableFact) Set(val *Fact) {
	v.value = val
	v.isSet = true
}

func (v NullableFact) IsSet() bool {
	return v.isSet
}

func (v *NullableFact) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFact(val *Fact) *NullableFact {
	return &NullableFact{value: val, isSet: true}
}

func (v NullableFact) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFact) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


