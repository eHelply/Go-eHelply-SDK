/*
eHelply SDK - 1.1.94

eHelply SDK for SuperStack Services

API version: 1.1.94
Contact: support@ehelply.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ehelply

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// PlacesApiService PlacesApi service
type PlacesApiService service

type ApiCreatePlacePlacesPlacesPostRequest struct {
	ctx context.Context
	ApiService *PlacesApiService
	placeBase *PlaceBase
	xAccessToken *string
	xSecretToken *string
	authorization *string
	ehelplyActiveParticipant *string
	ehelplyProject *string
	ehelplyData *string
}

func (r ApiCreatePlacePlacesPlacesPostRequest) PlaceBase(placeBase PlaceBase) ApiCreatePlacePlacesPlacesPostRequest {
	r.placeBase = &placeBase
	return r
}

func (r ApiCreatePlacePlacesPlacesPostRequest) XAccessToken(xAccessToken string) ApiCreatePlacePlacesPlacesPostRequest {
	r.xAccessToken = &xAccessToken
	return r
}

func (r ApiCreatePlacePlacesPlacesPostRequest) XSecretToken(xSecretToken string) ApiCreatePlacePlacesPlacesPostRequest {
	r.xSecretToken = &xSecretToken
	return r
}

func (r ApiCreatePlacePlacesPlacesPostRequest) Authorization(authorization string) ApiCreatePlacePlacesPlacesPostRequest {
	r.authorization = &authorization
	return r
}

func (r ApiCreatePlacePlacesPlacesPostRequest) EhelplyActiveParticipant(ehelplyActiveParticipant string) ApiCreatePlacePlacesPlacesPostRequest {
	r.ehelplyActiveParticipant = &ehelplyActiveParticipant
	return r
}

func (r ApiCreatePlacePlacesPlacesPostRequest) EhelplyProject(ehelplyProject string) ApiCreatePlacePlacesPlacesPostRequest {
	r.ehelplyProject = &ehelplyProject
	return r
}

func (r ApiCreatePlacePlacesPlacesPostRequest) EhelplyData(ehelplyData string) ApiCreatePlacePlacesPlacesPostRequest {
	r.ehelplyData = &ehelplyData
	return r
}

func (r ApiCreatePlacePlacesPlacesPostRequest) Execute() (*PlaceResponse, *http.Response, error) {
	return r.ApiService.CreatePlacePlacesPlacesPostExecute(r)
}

/*
CreatePlacePlacesPlacesPost Create Place

Creates a Place.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreatePlacePlacesPlacesPostRequest
*/
func (a *PlacesApiService) CreatePlacePlacesPlacesPost(ctx context.Context) ApiCreatePlacePlacesPlacesPostRequest {
	return ApiCreatePlacePlacesPlacesPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PlaceResponse
func (a *PlacesApiService) CreatePlacePlacesPlacesPostExecute(r ApiCreatePlacePlacesPlacesPostRequest) (*PlaceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PlaceResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PlacesApiService.CreatePlacePlacesPlacesPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/places/places"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.placeBase == nil {
		return localVarReturnValue, nil, reportError("placeBase is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xAccessToken != nil {
		localVarHeaderParams["x-access-token"] = parameterToString(*r.xAccessToken, "")
	}
	if r.xSecretToken != nil {
		localVarHeaderParams["x-secret-token"] = parameterToString(*r.xSecretToken, "")
	}
	if r.authorization != nil {
		localVarHeaderParams["authorization"] = parameterToString(*r.authorization, "")
	}
	if r.ehelplyActiveParticipant != nil {
		localVarHeaderParams["ehelply-active-participant"] = parameterToString(*r.ehelplyActiveParticipant, "")
	}
	if r.ehelplyProject != nil {
		localVarHeaderParams["ehelply-project"] = parameterToString(*r.ehelplyProject, "")
	}
	if r.ehelplyData != nil {
		localVarHeaderParams["ehelply-data"] = parameterToString(*r.ehelplyData, "")
	}
	// body params
	localVarPostBody = r.placeBase
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeletePlacePlacesPlacesPlaceUuidDeleteRequest struct {
	ctx context.Context
	ApiService *PlacesApiService
	placeUuid string
	softDelete *bool
	xAccessToken *string
	xSecretToken *string
	authorization *string
	ehelplyActiveParticipant *string
	ehelplyProject *string
	ehelplyData *string
}

func (r ApiDeletePlacePlacesPlacesPlaceUuidDeleteRequest) SoftDelete(softDelete bool) ApiDeletePlacePlacesPlacesPlaceUuidDeleteRequest {
	r.softDelete = &softDelete
	return r
}

func (r ApiDeletePlacePlacesPlacesPlaceUuidDeleteRequest) XAccessToken(xAccessToken string) ApiDeletePlacePlacesPlacesPlaceUuidDeleteRequest {
	r.xAccessToken = &xAccessToken
	return r
}

func (r ApiDeletePlacePlacesPlacesPlaceUuidDeleteRequest) XSecretToken(xSecretToken string) ApiDeletePlacePlacesPlacesPlaceUuidDeleteRequest {
	r.xSecretToken = &xSecretToken
	return r
}

func (r ApiDeletePlacePlacesPlacesPlaceUuidDeleteRequest) Authorization(authorization string) ApiDeletePlacePlacesPlacesPlaceUuidDeleteRequest {
	r.authorization = &authorization
	return r
}

func (r ApiDeletePlacePlacesPlacesPlaceUuidDeleteRequest) EhelplyActiveParticipant(ehelplyActiveParticipant string) ApiDeletePlacePlacesPlacesPlaceUuidDeleteRequest {
	r.ehelplyActiveParticipant = &ehelplyActiveParticipant
	return r
}

func (r ApiDeletePlacePlacesPlacesPlaceUuidDeleteRequest) EhelplyProject(ehelplyProject string) ApiDeletePlacePlacesPlacesPlaceUuidDeleteRequest {
	r.ehelplyProject = &ehelplyProject
	return r
}

func (r ApiDeletePlacePlacesPlacesPlaceUuidDeleteRequest) EhelplyData(ehelplyData string) ApiDeletePlacePlacesPlacesPlaceUuidDeleteRequest {
	r.ehelplyData = &ehelplyData
	return r
}

func (r ApiDeletePlacePlacesPlacesPlaceUuidDeleteRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.DeletePlacePlacesPlacesPlaceUuidDeleteExecute(r)
}

/*
DeletePlacePlacesPlacesPlaceUuidDelete Delete Place

Deletes the place with the given ID and returns True if successful

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param placeUuid
 @return ApiDeletePlacePlacesPlacesPlaceUuidDeleteRequest
*/
func (a *PlacesApiService) DeletePlacePlacesPlacesPlaceUuidDelete(ctx context.Context, placeUuid string) ApiDeletePlacePlacesPlacesPlaceUuidDeleteRequest {
	return ApiDeletePlacePlacesPlacesPlaceUuidDeleteRequest{
		ApiService: a,
		ctx: ctx,
		placeUuid: placeUuid,
	}
}

// Execute executes the request
//  @return interface{}
func (a *PlacesApiService) DeletePlacePlacesPlacesPlaceUuidDeleteExecute(r ApiDeletePlacePlacesPlacesPlaceUuidDeleteRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PlacesApiService.DeletePlacePlacesPlacesPlaceUuidDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/places/places/{place_uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"place_uuid"+"}", url.PathEscape(parameterToString(r.placeUuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.softDelete != nil {
		localVarQueryParams.Add("soft_delete", parameterToString(*r.softDelete, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xAccessToken != nil {
		localVarHeaderParams["x-access-token"] = parameterToString(*r.xAccessToken, "")
	}
	if r.xSecretToken != nil {
		localVarHeaderParams["x-secret-token"] = parameterToString(*r.xSecretToken, "")
	}
	if r.authorization != nil {
		localVarHeaderParams["authorization"] = parameterToString(*r.authorization, "")
	}
	if r.ehelplyActiveParticipant != nil {
		localVarHeaderParams["ehelply-active-participant"] = parameterToString(*r.ehelplyActiveParticipant, "")
	}
	if r.ehelplyProject != nil {
		localVarHeaderParams["ehelply-project"] = parameterToString(*r.ehelplyProject, "")
	}
	if r.ehelplyData != nil {
		localVarHeaderParams["ehelply-data"] = parameterToString(*r.ehelplyData, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiForwardGeocodingPlacesGeocodingForwardGetRequest struct {
	ctx context.Context
	ApiService *PlacesApiService
	searchingPlace *string
	xAccessToken *string
	xSecretToken *string
	authorization *string
	ehelplyActiveParticipant *string
	ehelplyProject *string
	ehelplyData *string
}

func (r ApiForwardGeocodingPlacesGeocodingForwardGetRequest) SearchingPlace(searchingPlace string) ApiForwardGeocodingPlacesGeocodingForwardGetRequest {
	r.searchingPlace = &searchingPlace
	return r
}

func (r ApiForwardGeocodingPlacesGeocodingForwardGetRequest) XAccessToken(xAccessToken string) ApiForwardGeocodingPlacesGeocodingForwardGetRequest {
	r.xAccessToken = &xAccessToken
	return r
}

func (r ApiForwardGeocodingPlacesGeocodingForwardGetRequest) XSecretToken(xSecretToken string) ApiForwardGeocodingPlacesGeocodingForwardGetRequest {
	r.xSecretToken = &xSecretToken
	return r
}

func (r ApiForwardGeocodingPlacesGeocodingForwardGetRequest) Authorization(authorization string) ApiForwardGeocodingPlacesGeocodingForwardGetRequest {
	r.authorization = &authorization
	return r
}

func (r ApiForwardGeocodingPlacesGeocodingForwardGetRequest) EhelplyActiveParticipant(ehelplyActiveParticipant string) ApiForwardGeocodingPlacesGeocodingForwardGetRequest {
	r.ehelplyActiveParticipant = &ehelplyActiveParticipant
	return r
}

func (r ApiForwardGeocodingPlacesGeocodingForwardGetRequest) EhelplyProject(ehelplyProject string) ApiForwardGeocodingPlacesGeocodingForwardGetRequest {
	r.ehelplyProject = &ehelplyProject
	return r
}

func (r ApiForwardGeocodingPlacesGeocodingForwardGetRequest) EhelplyData(ehelplyData string) ApiForwardGeocodingPlacesGeocodingForwardGetRequest {
	r.ehelplyData = &ehelplyData
	return r
}

func (r ApiForwardGeocodingPlacesGeocodingForwardGetRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.ForwardGeocodingPlacesGeocodingForwardGetExecute(r)
}

/*
ForwardGeocodingPlacesGeocodingForwardGet Forward Geocoding

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiForwardGeocodingPlacesGeocodingForwardGetRequest
*/
func (a *PlacesApiService) ForwardGeocodingPlacesGeocodingForwardGet(ctx context.Context) ApiForwardGeocodingPlacesGeocodingForwardGetRequest {
	return ApiForwardGeocodingPlacesGeocodingForwardGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return interface{}
func (a *PlacesApiService) ForwardGeocodingPlacesGeocodingForwardGetExecute(r ApiForwardGeocodingPlacesGeocodingForwardGetRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PlacesApiService.ForwardGeocodingPlacesGeocodingForwardGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/places/geocoding/forward"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.searchingPlace == nil {
		return localVarReturnValue, nil, reportError("searchingPlace is required and must be specified")
	}

	localVarQueryParams.Add("searching_place", parameterToString(*r.searchingPlace, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xAccessToken != nil {
		localVarHeaderParams["x-access-token"] = parameterToString(*r.xAccessToken, "")
	}
	if r.xSecretToken != nil {
		localVarHeaderParams["x-secret-token"] = parameterToString(*r.xSecretToken, "")
	}
	if r.authorization != nil {
		localVarHeaderParams["authorization"] = parameterToString(*r.authorization, "")
	}
	if r.ehelplyActiveParticipant != nil {
		localVarHeaderParams["ehelply-active-participant"] = parameterToString(*r.ehelplyActiveParticipant, "")
	}
	if r.ehelplyProject != nil {
		localVarHeaderParams["ehelply-project"] = parameterToString(*r.ehelplyProject, "")
	}
	if r.ehelplyData != nil {
		localVarHeaderParams["ehelply-data"] = parameterToString(*r.ehelplyData, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetPlacePlacesPlacesPlaceUuidGetRequest struct {
	ctx context.Context
	ApiService *PlacesApiService
	placeUuid string
	withMeta *bool
	withCatalog *bool
	withReviews *bool
	withSchedule *bool
	withCollection *bool
	withBlog *bool
	withTags *bool
	withCategories *bool
	withCompany *bool
	xAccessToken *string
	xSecretToken *string
	authorization *string
	ehelplyActiveParticipant *string
	ehelplyProject *string
	ehelplyData *string
}

func (r ApiGetPlacePlacesPlacesPlaceUuidGetRequest) WithMeta(withMeta bool) ApiGetPlacePlacesPlacesPlaceUuidGetRequest {
	r.withMeta = &withMeta
	return r
}

func (r ApiGetPlacePlacesPlacesPlaceUuidGetRequest) WithCatalog(withCatalog bool) ApiGetPlacePlacesPlacesPlaceUuidGetRequest {
	r.withCatalog = &withCatalog
	return r
}

func (r ApiGetPlacePlacesPlacesPlaceUuidGetRequest) WithReviews(withReviews bool) ApiGetPlacePlacesPlacesPlaceUuidGetRequest {
	r.withReviews = &withReviews
	return r
}

func (r ApiGetPlacePlacesPlacesPlaceUuidGetRequest) WithSchedule(withSchedule bool) ApiGetPlacePlacesPlacesPlaceUuidGetRequest {
	r.withSchedule = &withSchedule
	return r
}

func (r ApiGetPlacePlacesPlacesPlaceUuidGetRequest) WithCollection(withCollection bool) ApiGetPlacePlacesPlacesPlaceUuidGetRequest {
	r.withCollection = &withCollection
	return r
}

func (r ApiGetPlacePlacesPlacesPlaceUuidGetRequest) WithBlog(withBlog bool) ApiGetPlacePlacesPlacesPlaceUuidGetRequest {
	r.withBlog = &withBlog
	return r
}

func (r ApiGetPlacePlacesPlacesPlaceUuidGetRequest) WithTags(withTags bool) ApiGetPlacePlacesPlacesPlaceUuidGetRequest {
	r.withTags = &withTags
	return r
}

func (r ApiGetPlacePlacesPlacesPlaceUuidGetRequest) WithCategories(withCategories bool) ApiGetPlacePlacesPlacesPlaceUuidGetRequest {
	r.withCategories = &withCategories
	return r
}

func (r ApiGetPlacePlacesPlacesPlaceUuidGetRequest) WithCompany(withCompany bool) ApiGetPlacePlacesPlacesPlaceUuidGetRequest {
	r.withCompany = &withCompany
	return r
}

func (r ApiGetPlacePlacesPlacesPlaceUuidGetRequest) XAccessToken(xAccessToken string) ApiGetPlacePlacesPlacesPlaceUuidGetRequest {
	r.xAccessToken = &xAccessToken
	return r
}

func (r ApiGetPlacePlacesPlacesPlaceUuidGetRequest) XSecretToken(xSecretToken string) ApiGetPlacePlacesPlacesPlaceUuidGetRequest {
	r.xSecretToken = &xSecretToken
	return r
}

func (r ApiGetPlacePlacesPlacesPlaceUuidGetRequest) Authorization(authorization string) ApiGetPlacePlacesPlacesPlaceUuidGetRequest {
	r.authorization = &authorization
	return r
}

func (r ApiGetPlacePlacesPlacesPlaceUuidGetRequest) EhelplyActiveParticipant(ehelplyActiveParticipant string) ApiGetPlacePlacesPlacesPlaceUuidGetRequest {
	r.ehelplyActiveParticipant = &ehelplyActiveParticipant
	return r
}

func (r ApiGetPlacePlacesPlacesPlaceUuidGetRequest) EhelplyProject(ehelplyProject string) ApiGetPlacePlacesPlacesPlaceUuidGetRequest {
	r.ehelplyProject = &ehelplyProject
	return r
}

func (r ApiGetPlacePlacesPlacesPlaceUuidGetRequest) EhelplyData(ehelplyData string) ApiGetPlacePlacesPlacesPlaceUuidGetRequest {
	r.ehelplyData = &ehelplyData
	return r
}

func (r ApiGetPlacePlacesPlacesPlaceUuidGetRequest) Execute() (*PlaceResponse, *http.Response, error) {
	return r.ApiService.GetPlacePlacesPlacesPlaceUuidGetExecute(r)
}

/*
GetPlacePlacesPlacesPlaceUuidGet Get Place

Gets the place information given the Place ID

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param placeUuid
 @return ApiGetPlacePlacesPlacesPlaceUuidGetRequest
*/
func (a *PlacesApiService) GetPlacePlacesPlacesPlaceUuidGet(ctx context.Context, placeUuid string) ApiGetPlacePlacesPlacesPlaceUuidGetRequest {
	return ApiGetPlacePlacesPlacesPlaceUuidGetRequest{
		ApiService: a,
		ctx: ctx,
		placeUuid: placeUuid,
	}
}

// Execute executes the request
//  @return PlaceResponse
func (a *PlacesApiService) GetPlacePlacesPlacesPlaceUuidGetExecute(r ApiGetPlacePlacesPlacesPlaceUuidGetRequest) (*PlaceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PlaceResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PlacesApiService.GetPlacePlacesPlacesPlaceUuidGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/places/places/{place_uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"place_uuid"+"}", url.PathEscape(parameterToString(r.placeUuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.withMeta != nil {
		localVarQueryParams.Add("with_meta", parameterToString(*r.withMeta, ""))
	}
	if r.withCatalog != nil {
		localVarQueryParams.Add("with_catalog", parameterToString(*r.withCatalog, ""))
	}
	if r.withReviews != nil {
		localVarQueryParams.Add("with_reviews", parameterToString(*r.withReviews, ""))
	}
	if r.withSchedule != nil {
		localVarQueryParams.Add("with_schedule", parameterToString(*r.withSchedule, ""))
	}
	if r.withCollection != nil {
		localVarQueryParams.Add("with_collection", parameterToString(*r.withCollection, ""))
	}
	if r.withBlog != nil {
		localVarQueryParams.Add("with_blog", parameterToString(*r.withBlog, ""))
	}
	if r.withTags != nil {
		localVarQueryParams.Add("with_tags", parameterToString(*r.withTags, ""))
	}
	if r.withCategories != nil {
		localVarQueryParams.Add("with_categories", parameterToString(*r.withCategories, ""))
	}
	if r.withCompany != nil {
		localVarQueryParams.Add("with_company", parameterToString(*r.withCompany, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xAccessToken != nil {
		localVarHeaderParams["x-access-token"] = parameterToString(*r.xAccessToken, "")
	}
	if r.xSecretToken != nil {
		localVarHeaderParams["x-secret-token"] = parameterToString(*r.xSecretToken, "")
	}
	if r.authorization != nil {
		localVarHeaderParams["authorization"] = parameterToString(*r.authorization, "")
	}
	if r.ehelplyActiveParticipant != nil {
		localVarHeaderParams["ehelply-active-participant"] = parameterToString(*r.ehelplyActiveParticipant, "")
	}
	if r.ehelplyProject != nil {
		localVarHeaderParams["ehelply-project"] = parameterToString(*r.ehelplyProject, "")
	}
	if r.ehelplyData != nil {
		localVarHeaderParams["ehelply-data"] = parameterToString(*r.ehelplyData, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReverseGeocodingPlacesGeocodingReverseGetRequest struct {
	ctx context.Context
	ApiService *PlacesApiService
	long *float32
	lat *float32
	xAccessToken *string
	xSecretToken *string
	authorization *string
	ehelplyActiveParticipant *string
	ehelplyProject *string
	ehelplyData *string
}

func (r ApiReverseGeocodingPlacesGeocodingReverseGetRequest) Long(long float32) ApiReverseGeocodingPlacesGeocodingReverseGetRequest {
	r.long = &long
	return r
}

func (r ApiReverseGeocodingPlacesGeocodingReverseGetRequest) Lat(lat float32) ApiReverseGeocodingPlacesGeocodingReverseGetRequest {
	r.lat = &lat
	return r
}

func (r ApiReverseGeocodingPlacesGeocodingReverseGetRequest) XAccessToken(xAccessToken string) ApiReverseGeocodingPlacesGeocodingReverseGetRequest {
	r.xAccessToken = &xAccessToken
	return r
}

func (r ApiReverseGeocodingPlacesGeocodingReverseGetRequest) XSecretToken(xSecretToken string) ApiReverseGeocodingPlacesGeocodingReverseGetRequest {
	r.xSecretToken = &xSecretToken
	return r
}

func (r ApiReverseGeocodingPlacesGeocodingReverseGetRequest) Authorization(authorization string) ApiReverseGeocodingPlacesGeocodingReverseGetRequest {
	r.authorization = &authorization
	return r
}

func (r ApiReverseGeocodingPlacesGeocodingReverseGetRequest) EhelplyActiveParticipant(ehelplyActiveParticipant string) ApiReverseGeocodingPlacesGeocodingReverseGetRequest {
	r.ehelplyActiveParticipant = &ehelplyActiveParticipant
	return r
}

func (r ApiReverseGeocodingPlacesGeocodingReverseGetRequest) EhelplyProject(ehelplyProject string) ApiReverseGeocodingPlacesGeocodingReverseGetRequest {
	r.ehelplyProject = &ehelplyProject
	return r
}

func (r ApiReverseGeocodingPlacesGeocodingReverseGetRequest) EhelplyData(ehelplyData string) ApiReverseGeocodingPlacesGeocodingReverseGetRequest {
	r.ehelplyData = &ehelplyData
	return r
}

func (r ApiReverseGeocodingPlacesGeocodingReverseGetRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.ReverseGeocodingPlacesGeocodingReverseGetExecute(r)
}

/*
ReverseGeocodingPlacesGeocodingReverseGet Reverse Geocoding

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiReverseGeocodingPlacesGeocodingReverseGetRequest
*/
func (a *PlacesApiService) ReverseGeocodingPlacesGeocodingReverseGet(ctx context.Context) ApiReverseGeocodingPlacesGeocodingReverseGetRequest {
	return ApiReverseGeocodingPlacesGeocodingReverseGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return interface{}
func (a *PlacesApiService) ReverseGeocodingPlacesGeocodingReverseGetExecute(r ApiReverseGeocodingPlacesGeocodingReverseGetRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PlacesApiService.ReverseGeocodingPlacesGeocodingReverseGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/places/geocoding/reverse"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.long == nil {
		return localVarReturnValue, nil, reportError("long is required and must be specified")
	}
	if r.lat == nil {
		return localVarReturnValue, nil, reportError("lat is required and must be specified")
	}

	localVarQueryParams.Add("long", parameterToString(*r.long, ""))
	localVarQueryParams.Add("lat", parameterToString(*r.lat, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xAccessToken != nil {
		localVarHeaderParams["x-access-token"] = parameterToString(*r.xAccessToken, "")
	}
	if r.xSecretToken != nil {
		localVarHeaderParams["x-secret-token"] = parameterToString(*r.xSecretToken, "")
	}
	if r.authorization != nil {
		localVarHeaderParams["authorization"] = parameterToString(*r.authorization, "")
	}
	if r.ehelplyActiveParticipant != nil {
		localVarHeaderParams["ehelply-active-participant"] = parameterToString(*r.ehelplyActiveParticipant, "")
	}
	if r.ehelplyProject != nil {
		localVarHeaderParams["ehelply-project"] = parameterToString(*r.ehelplyProject, "")
	}
	if r.ehelplyData != nil {
		localVarHeaderParams["ehelply-data"] = parameterToString(*r.ehelplyData, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchPlacesBySearchStringPlacesSearchPlacesStringGetRequest struct {
	ctx context.Context
	ApiService *PlacesApiService
	searchString *string
	page *int32
	pageSize *int32
	sortOn *string
	sortDesc *bool
	xAccessToken *string
	xSecretToken *string
	authorization *string
	ehelplyActiveParticipant *string
	ehelplyProject *string
	ehelplyData *string
}

func (r ApiSearchPlacesBySearchStringPlacesSearchPlacesStringGetRequest) SearchString(searchString string) ApiSearchPlacesBySearchStringPlacesSearchPlacesStringGetRequest {
	r.searchString = &searchString
	return r
}

func (r ApiSearchPlacesBySearchStringPlacesSearchPlacesStringGetRequest) Page(page int32) ApiSearchPlacesBySearchStringPlacesSearchPlacesStringGetRequest {
	r.page = &page
	return r
}

func (r ApiSearchPlacesBySearchStringPlacesSearchPlacesStringGetRequest) PageSize(pageSize int32) ApiSearchPlacesBySearchStringPlacesSearchPlacesStringGetRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiSearchPlacesBySearchStringPlacesSearchPlacesStringGetRequest) SortOn(sortOn string) ApiSearchPlacesBySearchStringPlacesSearchPlacesStringGetRequest {
	r.sortOn = &sortOn
	return r
}

func (r ApiSearchPlacesBySearchStringPlacesSearchPlacesStringGetRequest) SortDesc(sortDesc bool) ApiSearchPlacesBySearchStringPlacesSearchPlacesStringGetRequest {
	r.sortDesc = &sortDesc
	return r
}

func (r ApiSearchPlacesBySearchStringPlacesSearchPlacesStringGetRequest) XAccessToken(xAccessToken string) ApiSearchPlacesBySearchStringPlacesSearchPlacesStringGetRequest {
	r.xAccessToken = &xAccessToken
	return r
}

func (r ApiSearchPlacesBySearchStringPlacesSearchPlacesStringGetRequest) XSecretToken(xSecretToken string) ApiSearchPlacesBySearchStringPlacesSearchPlacesStringGetRequest {
	r.xSecretToken = &xSecretToken
	return r
}

func (r ApiSearchPlacesBySearchStringPlacesSearchPlacesStringGetRequest) Authorization(authorization string) ApiSearchPlacesBySearchStringPlacesSearchPlacesStringGetRequest {
	r.authorization = &authorization
	return r
}

func (r ApiSearchPlacesBySearchStringPlacesSearchPlacesStringGetRequest) EhelplyActiveParticipant(ehelplyActiveParticipant string) ApiSearchPlacesBySearchStringPlacesSearchPlacesStringGetRequest {
	r.ehelplyActiveParticipant = &ehelplyActiveParticipant
	return r
}

func (r ApiSearchPlacesBySearchStringPlacesSearchPlacesStringGetRequest) EhelplyProject(ehelplyProject string) ApiSearchPlacesBySearchStringPlacesSearchPlacesStringGetRequest {
	r.ehelplyProject = &ehelplyProject
	return r
}

func (r ApiSearchPlacesBySearchStringPlacesSearchPlacesStringGetRequest) EhelplyData(ehelplyData string) ApiSearchPlacesBySearchStringPlacesSearchPlacesStringGetRequest {
	r.ehelplyData = &ehelplyData
	return r
}

func (r ApiSearchPlacesBySearchStringPlacesSearchPlacesStringGetRequest) Execute() (*Page, *http.Response, error) {
	return r.ApiService.SearchPlacesBySearchStringPlacesSearchPlacesStringGetExecute(r)
}

/*
SearchPlacesBySearchStringPlacesSearchPlacesStringGet Search Places By Search String

Search places by a search string

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSearchPlacesBySearchStringPlacesSearchPlacesStringGetRequest
*/
func (a *PlacesApiService) SearchPlacesBySearchStringPlacesSearchPlacesStringGet(ctx context.Context) ApiSearchPlacesBySearchStringPlacesSearchPlacesStringGetRequest {
	return ApiSearchPlacesBySearchStringPlacesSearchPlacesStringGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Page
func (a *PlacesApiService) SearchPlacesBySearchStringPlacesSearchPlacesStringGetExecute(r ApiSearchPlacesBySearchStringPlacesSearchPlacesStringGetRequest) (*Page, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Page
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PlacesApiService.SearchPlacesBySearchStringPlacesSearchPlacesStringGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/places/search/places/string"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.searchString != nil {
		localVarQueryParams.Add("search_string", parameterToString(*r.searchString, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("page_size", parameterToString(*r.pageSize, ""))
	}
	if r.sortOn != nil {
		localVarQueryParams.Add("sort_on", parameterToString(*r.sortOn, ""))
	}
	if r.sortDesc != nil {
		localVarQueryParams.Add("sort_desc", parameterToString(*r.sortDesc, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xAccessToken != nil {
		localVarHeaderParams["x-access-token"] = parameterToString(*r.xAccessToken, "")
	}
	if r.xSecretToken != nil {
		localVarHeaderParams["x-secret-token"] = parameterToString(*r.xSecretToken, "")
	}
	if r.authorization != nil {
		localVarHeaderParams["authorization"] = parameterToString(*r.authorization, "")
	}
	if r.ehelplyActiveParticipant != nil {
		localVarHeaderParams["ehelply-active-participant"] = parameterToString(*r.ehelplyActiveParticipant, "")
	}
	if r.ehelplyProject != nil {
		localVarHeaderParams["ehelply-project"] = parameterToString(*r.ehelplyProject, "")
	}
	if r.ehelplyData != nil {
		localVarHeaderParams["ehelply-data"] = parameterToString(*r.ehelplyData, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchPlacesPlacesPlacesGetRequest struct {
	ctx context.Context
	ApiService *PlacesApiService
	projectUuid *string
	name *string
	addressLine1 *string
	addressLine2 *string
	city *string
	provinceState *string
	country *string
	postalZipCode *string
	lat *string
	lng *string
	email *string
	isPublic *bool
	isDeleted *bool
	withCompany *bool
	withMeta *bool
	withCatalog *bool
	withReviews *bool
	withSchedule *bool
	withCollection *bool
	withBlog *bool
	withTags *bool
	withCategories *bool
	page *int32
	pageSize *int32
	sortOn *string
	sortDesc *bool
	xAccessToken *string
	xSecretToken *string
	authorization *string
	ehelplyActiveParticipant *string
	ehelplyProject *string
	ehelplyData *string
}

func (r ApiSearchPlacesPlacesPlacesGetRequest) ProjectUuid(projectUuid string) ApiSearchPlacesPlacesPlacesGetRequest {
	r.projectUuid = &projectUuid
	return r
}

func (r ApiSearchPlacesPlacesPlacesGetRequest) Name(name string) ApiSearchPlacesPlacesPlacesGetRequest {
	r.name = &name
	return r
}

func (r ApiSearchPlacesPlacesPlacesGetRequest) AddressLine1(addressLine1 string) ApiSearchPlacesPlacesPlacesGetRequest {
	r.addressLine1 = &addressLine1
	return r
}

func (r ApiSearchPlacesPlacesPlacesGetRequest) AddressLine2(addressLine2 string) ApiSearchPlacesPlacesPlacesGetRequest {
	r.addressLine2 = &addressLine2
	return r
}

func (r ApiSearchPlacesPlacesPlacesGetRequest) City(city string) ApiSearchPlacesPlacesPlacesGetRequest {
	r.city = &city
	return r
}

func (r ApiSearchPlacesPlacesPlacesGetRequest) ProvinceState(provinceState string) ApiSearchPlacesPlacesPlacesGetRequest {
	r.provinceState = &provinceState
	return r
}

func (r ApiSearchPlacesPlacesPlacesGetRequest) Country(country string) ApiSearchPlacesPlacesPlacesGetRequest {
	r.country = &country
	return r
}

func (r ApiSearchPlacesPlacesPlacesGetRequest) PostalZipCode(postalZipCode string) ApiSearchPlacesPlacesPlacesGetRequest {
	r.postalZipCode = &postalZipCode
	return r
}

func (r ApiSearchPlacesPlacesPlacesGetRequest) Lat(lat string) ApiSearchPlacesPlacesPlacesGetRequest {
	r.lat = &lat
	return r
}

func (r ApiSearchPlacesPlacesPlacesGetRequest) Lng(lng string) ApiSearchPlacesPlacesPlacesGetRequest {
	r.lng = &lng
	return r
}

func (r ApiSearchPlacesPlacesPlacesGetRequest) Email(email string) ApiSearchPlacesPlacesPlacesGetRequest {
	r.email = &email
	return r
}

func (r ApiSearchPlacesPlacesPlacesGetRequest) IsPublic(isPublic bool) ApiSearchPlacesPlacesPlacesGetRequest {
	r.isPublic = &isPublic
	return r
}

func (r ApiSearchPlacesPlacesPlacesGetRequest) IsDeleted(isDeleted bool) ApiSearchPlacesPlacesPlacesGetRequest {
	r.isDeleted = &isDeleted
	return r
}

func (r ApiSearchPlacesPlacesPlacesGetRequest) WithCompany(withCompany bool) ApiSearchPlacesPlacesPlacesGetRequest {
	r.withCompany = &withCompany
	return r
}

func (r ApiSearchPlacesPlacesPlacesGetRequest) WithMeta(withMeta bool) ApiSearchPlacesPlacesPlacesGetRequest {
	r.withMeta = &withMeta
	return r
}

func (r ApiSearchPlacesPlacesPlacesGetRequest) WithCatalog(withCatalog bool) ApiSearchPlacesPlacesPlacesGetRequest {
	r.withCatalog = &withCatalog
	return r
}

func (r ApiSearchPlacesPlacesPlacesGetRequest) WithReviews(withReviews bool) ApiSearchPlacesPlacesPlacesGetRequest {
	r.withReviews = &withReviews
	return r
}

func (r ApiSearchPlacesPlacesPlacesGetRequest) WithSchedule(withSchedule bool) ApiSearchPlacesPlacesPlacesGetRequest {
	r.withSchedule = &withSchedule
	return r
}

func (r ApiSearchPlacesPlacesPlacesGetRequest) WithCollection(withCollection bool) ApiSearchPlacesPlacesPlacesGetRequest {
	r.withCollection = &withCollection
	return r
}

func (r ApiSearchPlacesPlacesPlacesGetRequest) WithBlog(withBlog bool) ApiSearchPlacesPlacesPlacesGetRequest {
	r.withBlog = &withBlog
	return r
}

func (r ApiSearchPlacesPlacesPlacesGetRequest) WithTags(withTags bool) ApiSearchPlacesPlacesPlacesGetRequest {
	r.withTags = &withTags
	return r
}

func (r ApiSearchPlacesPlacesPlacesGetRequest) WithCategories(withCategories bool) ApiSearchPlacesPlacesPlacesGetRequest {
	r.withCategories = &withCategories
	return r
}

func (r ApiSearchPlacesPlacesPlacesGetRequest) Page(page int32) ApiSearchPlacesPlacesPlacesGetRequest {
	r.page = &page
	return r
}

func (r ApiSearchPlacesPlacesPlacesGetRequest) PageSize(pageSize int32) ApiSearchPlacesPlacesPlacesGetRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiSearchPlacesPlacesPlacesGetRequest) SortOn(sortOn string) ApiSearchPlacesPlacesPlacesGetRequest {
	r.sortOn = &sortOn
	return r
}

func (r ApiSearchPlacesPlacesPlacesGetRequest) SortDesc(sortDesc bool) ApiSearchPlacesPlacesPlacesGetRequest {
	r.sortDesc = &sortDesc
	return r
}

func (r ApiSearchPlacesPlacesPlacesGetRequest) XAccessToken(xAccessToken string) ApiSearchPlacesPlacesPlacesGetRequest {
	r.xAccessToken = &xAccessToken
	return r
}

func (r ApiSearchPlacesPlacesPlacesGetRequest) XSecretToken(xSecretToken string) ApiSearchPlacesPlacesPlacesGetRequest {
	r.xSecretToken = &xSecretToken
	return r
}

func (r ApiSearchPlacesPlacesPlacesGetRequest) Authorization(authorization string) ApiSearchPlacesPlacesPlacesGetRequest {
	r.authorization = &authorization
	return r
}

func (r ApiSearchPlacesPlacesPlacesGetRequest) EhelplyActiveParticipant(ehelplyActiveParticipant string) ApiSearchPlacesPlacesPlacesGetRequest {
	r.ehelplyActiveParticipant = &ehelplyActiveParticipant
	return r
}

func (r ApiSearchPlacesPlacesPlacesGetRequest) EhelplyProject(ehelplyProject string) ApiSearchPlacesPlacesPlacesGetRequest {
	r.ehelplyProject = &ehelplyProject
	return r
}

func (r ApiSearchPlacesPlacesPlacesGetRequest) EhelplyData(ehelplyData string) ApiSearchPlacesPlacesPlacesGetRequest {
	r.ehelplyData = &ehelplyData
	return r
}

func (r ApiSearchPlacesPlacesPlacesGetRequest) Execute() (*Page, *http.Response, error) {
	return r.ApiService.SearchPlacesPlacesPlacesGetExecute(r)
}

/*
SearchPlacesPlacesPlacesGet Search Places

Search all places and returns paginated results with Places being stored in items field.
Can search by `project_uuid, name, address, address_line_2, city, province_state, country, postal_zip_code, lat, lng
email` string fields or the `is_public and is_deleted` boolean fields. To search with these fields use query params
with string values. For sorting fill out "sort_desc" field with either true/false and the "sort_on" query parameter
with column you want to sort on (ex: name). Max pagination items per page is 50.
Item return format:
```
{
    uuid                                **type:** string
    project_uuid                        **type:** string or None

    meta_uuid                           **type:** string or None

    catalog_data                        **type:** dict or None

    review_group_data                   **type:** dict or None

    schedule_data                       **type:** dict or None

    collection_data                     **type:** dict or None

    blog_data                           **type:** dict or None

    tags                                **type:** [TagBase] or None

    categories                          **type:** [CategoryBase] or None

    company                             **type:** CompanyBase or None

    created_at                          **type:** string or None

    updated_at                          **type:** string or None

    deleted_at                          **type:** string or None

}
```

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSearchPlacesPlacesPlacesGetRequest
*/
func (a *PlacesApiService) SearchPlacesPlacesPlacesGet(ctx context.Context) ApiSearchPlacesPlacesPlacesGetRequest {
	return ApiSearchPlacesPlacesPlacesGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Page
func (a *PlacesApiService) SearchPlacesPlacesPlacesGetExecute(r ApiSearchPlacesPlacesPlacesGetRequest) (*Page, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Page
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PlacesApiService.SearchPlacesPlacesPlacesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/places/places"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.projectUuid != nil {
		localVarQueryParams.Add("project_uuid", parameterToString(*r.projectUuid, ""))
	}
	if r.name != nil {
		localVarQueryParams.Add("name", parameterToString(*r.name, ""))
	}
	if r.addressLine1 != nil {
		localVarQueryParams.Add("address_line_1", parameterToString(*r.addressLine1, ""))
	}
	if r.addressLine2 != nil {
		localVarQueryParams.Add("address_line_2", parameterToString(*r.addressLine2, ""))
	}
	if r.city != nil {
		localVarQueryParams.Add("city", parameterToString(*r.city, ""))
	}
	if r.provinceState != nil {
		localVarQueryParams.Add("province_state", parameterToString(*r.provinceState, ""))
	}
	if r.country != nil {
		localVarQueryParams.Add("country", parameterToString(*r.country, ""))
	}
	if r.postalZipCode != nil {
		localVarQueryParams.Add("postal_zip_code", parameterToString(*r.postalZipCode, ""))
	}
	if r.lat != nil {
		localVarQueryParams.Add("lat", parameterToString(*r.lat, ""))
	}
	if r.lng != nil {
		localVarQueryParams.Add("lng", parameterToString(*r.lng, ""))
	}
	if r.email != nil {
		localVarQueryParams.Add("email", parameterToString(*r.email, ""))
	}
	if r.isPublic != nil {
		localVarQueryParams.Add("is_public", parameterToString(*r.isPublic, ""))
	}
	if r.isDeleted != nil {
		localVarQueryParams.Add("is_deleted", parameterToString(*r.isDeleted, ""))
	}
	if r.withCompany != nil {
		localVarQueryParams.Add("with_company", parameterToString(*r.withCompany, ""))
	}
	if r.withMeta != nil {
		localVarQueryParams.Add("with_meta", parameterToString(*r.withMeta, ""))
	}
	if r.withCatalog != nil {
		localVarQueryParams.Add("with_catalog", parameterToString(*r.withCatalog, ""))
	}
	if r.withReviews != nil {
		localVarQueryParams.Add("with_reviews", parameterToString(*r.withReviews, ""))
	}
	if r.withSchedule != nil {
		localVarQueryParams.Add("with_schedule", parameterToString(*r.withSchedule, ""))
	}
	if r.withCollection != nil {
		localVarQueryParams.Add("with_collection", parameterToString(*r.withCollection, ""))
	}
	if r.withBlog != nil {
		localVarQueryParams.Add("with_blog", parameterToString(*r.withBlog, ""))
	}
	if r.withTags != nil {
		localVarQueryParams.Add("with_tags", parameterToString(*r.withTags, ""))
	}
	if r.withCategories != nil {
		localVarQueryParams.Add("with_categories", parameterToString(*r.withCategories, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("page_size", parameterToString(*r.pageSize, ""))
	}
	if r.sortOn != nil {
		localVarQueryParams.Add("sort_on", parameterToString(*r.sortOn, ""))
	}
	if r.sortDesc != nil {
		localVarQueryParams.Add("sort_desc", parameterToString(*r.sortDesc, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xAccessToken != nil {
		localVarHeaderParams["x-access-token"] = parameterToString(*r.xAccessToken, "")
	}
	if r.xSecretToken != nil {
		localVarHeaderParams["x-secret-token"] = parameterToString(*r.xSecretToken, "")
	}
	if r.authorization != nil {
		localVarHeaderParams["authorization"] = parameterToString(*r.authorization, "")
	}
	if r.ehelplyActiveParticipant != nil {
		localVarHeaderParams["ehelply-active-participant"] = parameterToString(*r.ehelplyActiveParticipant, "")
	}
	if r.ehelplyProject != nil {
		localVarHeaderParams["ehelply-project"] = parameterToString(*r.ehelplyProject, "")
	}
	if r.ehelplyData != nil {
		localVarHeaderParams["ehelply-data"] = parameterToString(*r.ehelplyData, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdatePlacePlacesPlacesPlaceUuidPutRequest struct {
	ctx context.Context
	ApiService *PlacesApiService
	placeUuid string
	placeBase *PlaceBase
	xAccessToken *string
	xSecretToken *string
	authorization *string
	ehelplyActiveParticipant *string
	ehelplyProject *string
	ehelplyData *string
}

func (r ApiUpdatePlacePlacesPlacesPlaceUuidPutRequest) PlaceBase(placeBase PlaceBase) ApiUpdatePlacePlacesPlacesPlaceUuidPutRequest {
	r.placeBase = &placeBase
	return r
}

func (r ApiUpdatePlacePlacesPlacesPlaceUuidPutRequest) XAccessToken(xAccessToken string) ApiUpdatePlacePlacesPlacesPlaceUuidPutRequest {
	r.xAccessToken = &xAccessToken
	return r
}

func (r ApiUpdatePlacePlacesPlacesPlaceUuidPutRequest) XSecretToken(xSecretToken string) ApiUpdatePlacePlacesPlacesPlaceUuidPutRequest {
	r.xSecretToken = &xSecretToken
	return r
}

func (r ApiUpdatePlacePlacesPlacesPlaceUuidPutRequest) Authorization(authorization string) ApiUpdatePlacePlacesPlacesPlaceUuidPutRequest {
	r.authorization = &authorization
	return r
}

func (r ApiUpdatePlacePlacesPlacesPlaceUuidPutRequest) EhelplyActiveParticipant(ehelplyActiveParticipant string) ApiUpdatePlacePlacesPlacesPlaceUuidPutRequest {
	r.ehelplyActiveParticipant = &ehelplyActiveParticipant
	return r
}

func (r ApiUpdatePlacePlacesPlacesPlaceUuidPutRequest) EhelplyProject(ehelplyProject string) ApiUpdatePlacePlacesPlacesPlaceUuidPutRequest {
	r.ehelplyProject = &ehelplyProject
	return r
}

func (r ApiUpdatePlacePlacesPlacesPlaceUuidPutRequest) EhelplyData(ehelplyData string) ApiUpdatePlacePlacesPlacesPlaceUuidPutRequest {
	r.ehelplyData = &ehelplyData
	return r
}

func (r ApiUpdatePlacePlacesPlacesPlaceUuidPutRequest) Execute() (*PlaceResponse, *http.Response, error) {
	return r.ApiService.UpdatePlacePlacesPlacesPlaceUuidPutExecute(r)
}

/*
UpdatePlacePlacesPlacesPlaceUuidPut Update Place

Update Place with given info, only updating the fields supplied. Place Uuid must be sent however.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param placeUuid
 @return ApiUpdatePlacePlacesPlacesPlaceUuidPutRequest
*/
func (a *PlacesApiService) UpdatePlacePlacesPlacesPlaceUuidPut(ctx context.Context, placeUuid string) ApiUpdatePlacePlacesPlacesPlaceUuidPutRequest {
	return ApiUpdatePlacePlacesPlacesPlaceUuidPutRequest{
		ApiService: a,
		ctx: ctx,
		placeUuid: placeUuid,
	}
}

// Execute executes the request
//  @return PlaceResponse
func (a *PlacesApiService) UpdatePlacePlacesPlacesPlaceUuidPutExecute(r ApiUpdatePlacePlacesPlacesPlaceUuidPutRequest) (*PlaceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PlaceResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PlacesApiService.UpdatePlacePlacesPlacesPlaceUuidPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/places/places/{place_uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"place_uuid"+"}", url.PathEscape(parameterToString(r.placeUuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.placeBase == nil {
		return localVarReturnValue, nil, reportError("placeBase is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xAccessToken != nil {
		localVarHeaderParams["x-access-token"] = parameterToString(*r.xAccessToken, "")
	}
	if r.xSecretToken != nil {
		localVarHeaderParams["x-secret-token"] = parameterToString(*r.xSecretToken, "")
	}
	if r.authorization != nil {
		localVarHeaderParams["authorization"] = parameterToString(*r.authorization, "")
	}
	if r.ehelplyActiveParticipant != nil {
		localVarHeaderParams["ehelply-active-participant"] = parameterToString(*r.ehelplyActiveParticipant, "")
	}
	if r.ehelplyProject != nil {
		localVarHeaderParams["ehelply-project"] = parameterToString(*r.ehelplyProject, "")
	}
	if r.ehelplyData != nil {
		localVarHeaderParams["ehelply-data"] = parameterToString(*r.ehelplyData, "")
	}
	// body params
	localVarPostBody = r.placeBase
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
